// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/compliance/v1beta1/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UnbondingState stores the state for the unbonding of stakes and delegations.
type QueueState struct {
	// low_index is the tail of the queue. It is the
	// oldest entry in the queue. If this entry isn't
	// due, non of the other entries is.
	LowIndex uint64 `protobuf:"varint,1,opt,name=low_index,json=lowIndex,proto3" json:"low_index,omitempty"`
	// high_index is the head of the queue. New entries
	// are added to the top.
	HighIndex uint64 `protobuf:"varint,2,opt,name=high_index,json=highIndex,proto3" json:"high_index,omitempty"`
}

func (m *QueueState) Reset()         { *m = QueueState{} }
func (m *QueueState) String() string { return proto.CompactTextString(m) }
func (*QueueState) ProtoMessage()    {}
func (*QueueState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cce4fd19494211c, []int{0}
}
func (m *QueueState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueState.Merge(m, src)
}
func (m *QueueState) XXX_Size() int {
	return m.Size()
}
func (m *QueueState) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueState.DiscardUnknown(m)
}

var xxx_messageInfo_QueueState proto.InternalMessageInfo

func (m *QueueState) GetLowIndex() uint64 {
	if m != nil {
		return m.LowIndex
	}
	return 0
}

func (m *QueueState) GetHighIndex() uint64 {
	if m != nil {
		return m.HighIndex
	}
	return 0
}

// MultiCoinPendingRewardsEntry ...
type MultiCoinPendingRewardsEntry struct {
	// index is needed for the queue-algorithm which
	// processes the commission changes
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// address ...
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// rewards ...
	Rewards      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=rewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards"`
	CreationDate int64                                    `protobuf:"varint,4,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (m *MultiCoinPendingRewardsEntry) Reset()         { *m = MultiCoinPendingRewardsEntry{} }
func (m *MultiCoinPendingRewardsEntry) String() string { return proto.CompactTextString(m) }
func (*MultiCoinPendingRewardsEntry) ProtoMessage()    {}
func (*MultiCoinPendingRewardsEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cce4fd19494211c, []int{1}
}
func (m *MultiCoinPendingRewardsEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiCoinPendingRewardsEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiCoinPendingRewardsEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiCoinPendingRewardsEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiCoinPendingRewardsEntry.Merge(m, src)
}
func (m *MultiCoinPendingRewardsEntry) XXX_Size() int {
	return m.Size()
}
func (m *MultiCoinPendingRewardsEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiCoinPendingRewardsEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MultiCoinPendingRewardsEntry proto.InternalMessageInfo

func (m *MultiCoinPendingRewardsEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MultiCoinPendingRewardsEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MultiCoinPendingRewardsEntry) GetRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *MultiCoinPendingRewardsEntry) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

// MultiCoinRefundPolicy ...
type MultiCoinRefundPolicy struct {
	Entries []*MultiCoinRefundDenomEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *MultiCoinRefundPolicy) Reset()         { *m = MultiCoinRefundPolicy{} }
func (m *MultiCoinRefundPolicy) String() string { return proto.CompactTextString(m) }
func (*MultiCoinRefundPolicy) ProtoMessage()    {}
func (*MultiCoinRefundPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cce4fd19494211c, []int{2}
}
func (m *MultiCoinRefundPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiCoinRefundPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiCoinRefundPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiCoinRefundPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiCoinRefundPolicy.Merge(m, src)
}
func (m *MultiCoinRefundPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MultiCoinRefundPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiCoinRefundPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MultiCoinRefundPolicy proto.InternalMessageInfo

func (m *MultiCoinRefundPolicy) GetEntries() []*MultiCoinRefundDenomEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// MultiCoinRefundDenomEntry ...
type MultiCoinRefundDenomEntry struct {
	Denom       string                            `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolWeights []*MultiCoinRefundPoolWeightEntry `protobuf:"bytes,2,rep,name=pool_weights,json=poolWeights,proto3" json:"pool_weights,omitempty"`
}

func (m *MultiCoinRefundDenomEntry) Reset()         { *m = MultiCoinRefundDenomEntry{} }
func (m *MultiCoinRefundDenomEntry) String() string { return proto.CompactTextString(m) }
func (*MultiCoinRefundDenomEntry) ProtoMessage()    {}
func (*MultiCoinRefundDenomEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cce4fd19494211c, []int{3}
}
func (m *MultiCoinRefundDenomEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiCoinRefundDenomEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiCoinRefundDenomEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiCoinRefundDenomEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiCoinRefundDenomEntry.Merge(m, src)
}
func (m *MultiCoinRefundDenomEntry) XXX_Size() int {
	return m.Size()
}
func (m *MultiCoinRefundDenomEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiCoinRefundDenomEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MultiCoinRefundDenomEntry proto.InternalMessageInfo

func (m *MultiCoinRefundDenomEntry) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MultiCoinRefundDenomEntry) GetPoolWeights() []*MultiCoinRefundPoolWeightEntry {
	if m != nil {
		return m.PoolWeights
	}
	return nil
}

// MultiCoinRefundPoolWeightEntry ...
type MultiCoinRefundPoolWeightEntry struct {
	PoolId uint64                      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Weight cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight"`
}

func (m *MultiCoinRefundPoolWeightEntry) Reset()         { *m = MultiCoinRefundPoolWeightEntry{} }
func (m *MultiCoinRefundPoolWeightEntry) String() string { return proto.CompactTextString(m) }
func (*MultiCoinRefundPoolWeightEntry) ProtoMessage()    {}
func (*MultiCoinRefundPoolWeightEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cce4fd19494211c, []int{4}
}
func (m *MultiCoinRefundPoolWeightEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiCoinRefundPoolWeightEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiCoinRefundPoolWeightEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiCoinRefundPoolWeightEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiCoinRefundPoolWeightEntry.Merge(m, src)
}
func (m *MultiCoinRefundPoolWeightEntry) XXX_Size() int {
	return m.Size()
}
func (m *MultiCoinRefundPoolWeightEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiCoinRefundPoolWeightEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MultiCoinRefundPoolWeightEntry proto.InternalMessageInfo

func (m *MultiCoinRefundPoolWeightEntry) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func init() {
	proto.RegisterType((*QueueState)(nil), "kyve.compliance.v1beta1.QueueState")
	proto.RegisterType((*MultiCoinPendingRewardsEntry)(nil), "kyve.compliance.v1beta1.MultiCoinPendingRewardsEntry")
	proto.RegisterType((*MultiCoinRefundPolicy)(nil), "kyve.compliance.v1beta1.MultiCoinRefundPolicy")
	proto.RegisterType((*MultiCoinRefundDenomEntry)(nil), "kyve.compliance.v1beta1.MultiCoinRefundDenomEntry")
	proto.RegisterType((*MultiCoinRefundPoolWeightEntry)(nil), "kyve.compliance.v1beta1.MultiCoinRefundPoolWeightEntry")
}

func init() {
	proto.RegisterFile("kyve/compliance/v1beta1/types.proto", fileDescriptor_0cce4fd19494211c)
}

var fileDescriptor_0cce4fd19494211c = []byte{
	// 534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xc1, 0x6e, 0x13, 0x3d,
	0x10, 0xce, 0xfe, 0xe9, 0x9f, 0x10, 0xb7, 0x1c, 0xb0, 0x8a, 0x9a, 0xb6, 0xb0, 0x89, 0x92, 0x4b,
	0x84, 0xc4, 0x5a, 0x2d, 0x42, 0x1c, 0xb8, 0x85, 0x54, 0x22, 0xa2, 0xa0, 0xb0, 0x48, 0x20, 0x7a,
	0x89, 0x9c, 0xf5, 0xb0, 0x6b, 0xb2, 0xb1, 0xa3, 0xb5, 0x93, 0x34, 0x0f, 0x81, 0xc4, 0x63, 0x20,
	0x4e, 0x3c, 0x46, 0x8f, 0x3d, 0x22, 0x0e, 0x2d, 0x4a, 0x0e, 0xbc, 0x06, 0xb2, 0xbd, 0x69, 0x23,
	0xa4, 0x22, 0x2e, 0xbb, 0xfe, 0x66, 0xbe, 0x19, 0xcf, 0x7c, 0xdf, 0x2e, 0x6a, 0x0e, 0xe7, 0x53,
	0x20, 0x91, 0x1c, 0x8d, 0x53, 0x4e, 0x45, 0x04, 0x64, 0x7a, 0x30, 0x00, 0x4d, 0x0f, 0x88, 0x9e,
	0x8f, 0x41, 0x05, 0xe3, 0x4c, 0x6a, 0x89, 0x77, 0x0c, 0x29, 0xb8, 0x26, 0x05, 0x39, 0x69, 0xef,
	0x0e, 0x1d, 0x71, 0x21, 0x89, 0x7d, 0x3a, 0xee, 0x9e, 0x1f, 0x49, 0x35, 0x92, 0x8a, 0x0c, 0xa8,
	0xba, 0x6e, 0x16, 0x49, 0x2e, 0xf2, 0xfc, 0x76, 0x2c, 0x63, 0x69, 0x8f, 0xc4, 0x9c, 0x5c, 0xb4,
	0xf1, 0x1c, 0xa1, 0xd7, 0x13, 0x98, 0xc0, 0x1b, 0x4d, 0x35, 0xe0, 0x7d, 0x54, 0x49, 0xe5, 0xac,
	0xcf, 0x05, 0x83, 0xd3, 0xaa, 0x57, 0xf7, 0x5a, 0x1b, 0xe1, 0xad, 0x54, 0xce, 0xba, 0x06, 0xe3,
	0xfb, 0x08, 0x25, 0x3c, 0x4e, 0xf2, 0xec, 0x7f, 0x36, 0x5b, 0x31, 0x11, 0x9b, 0x6e, 0x5c, 0x7a,
	0xe8, 0xde, 0xcb, 0x49, 0xaa, 0xf9, 0x33, 0xc9, 0x45, 0x0f, 0x04, 0xe3, 0x22, 0x0e, 0x61, 0x46,
	0x33, 0xa6, 0x8e, 0x84, 0xce, 0xe6, 0x78, 0x1b, 0xfd, 0xbf, 0xde, 0xd8, 0x01, 0x5c, 0x45, 0x65,
	0xca, 0x58, 0x06, 0x4a, 0xd9, 0x96, 0x95, 0x70, 0x05, 0xf1, 0x47, 0x54, 0xce, 0x5c, 0x7d, 0xb5,
	0x58, 0x2f, 0xb6, 0x36, 0x0f, 0x77, 0x03, 0xb7, 0x62, 0x60, 0x56, 0x5c, 0x49, 0x11, 0x98, 0xeb,
	0xda, 0x8f, 0xcf, 0x2e, 0x6a, 0x85, 0xaf, 0x97, 0xb5, 0x56, 0xcc, 0x75, 0x32, 0x19, 0x18, 0xc9,
	0x48, 0xae, 0x87, 0x7b, 0x3d, 0x54, 0x6c, 0x98, 0x4b, 0x6b, 0x0a, 0xd4, 0x97, 0x5f, 0xdf, 0x1e,
	0x78, 0xe1, 0xea, 0x02, 0xdc, 0x44, 0xb7, 0xa3, 0x0c, 0xa8, 0xe6, 0x52, 0xf4, 0x19, 0xd5, 0x50,
	0xdd, 0xa8, 0x7b, 0xad, 0x62, 0xb8, 0xb5, 0x0a, 0x76, 0xa8, 0x86, 0x06, 0xa0, 0xbb, 0x57, 0x0b,
	0x86, 0xf0, 0x61, 0x22, 0x58, 0x4f, 0xa6, 0x3c, 0x9a, 0xe3, 0x63, 0x54, 0x06, 0xa1, 0x33, 0x0e,
	0xaa, 0xea, 0xd9, 0x49, 0x0f, 0x83, 0x1b, 0x8c, 0x0b, 0xfe, 0x68, 0xd0, 0x01, 0x21, 0x47, 0x56,
	0x9e, 0x70, 0xd5, 0xa2, 0xf1, 0xc9, 0x43, 0xbb, 0x37, 0xd2, 0x8c, 0x8a, 0xcc, 0x20, 0xab, 0x62,
	0x25, 0x74, 0x00, 0x9f, 0xa0, 0xad, 0xb1, 0x94, 0x69, 0x7f, 0x06, 0x3c, 0x4e, 0xb4, 0x91, 0xd2,
	0x8c, 0xf1, 0xe4, 0x5f, 0xc7, 0xe8, 0x49, 0x99, 0xbe, 0xb3, 0xa5, 0x6e, 0x96, 0xcd, 0xf1, 0x55,
	0x40, 0x35, 0xa6, 0xc8, 0xff, 0x3b, 0x1d, 0xef, 0xa0, 0xb2, 0xbd, 0x9d, 0xb3, 0xdc, 0xdb, 0x92,
	0x81, 0x5d, 0x86, 0x9f, 0xa2, 0x92, 0x9b, 0xc8, 0x79, 0xdb, 0x6e, 0x1a, 0x9b, 0x7e, 0x5c, 0xd4,
	0xf6, 0x9d, 0x29, 0x8a, 0x0d, 0x03, 0x2e, 0xc9, 0x88, 0xea, 0x24, 0x38, 0x86, 0x98, 0x46, 0xf3,
	0x0e, 0x44, 0x61, 0x5e, 0xd2, 0xee, 0x9e, 0x2d, 0x7c, 0xef, 0x7c, 0xe1, 0x7b, 0x3f, 0x17, 0xbe,
	0xf7, 0x79, 0xe9, 0x17, 0xce, 0x97, 0x7e, 0xe1, 0xfb, 0xd2, 0x2f, 0x9c, 0x90, 0x35, 0x97, 0x5f,
	0xbc, 0x7f, 0x7b, 0xf4, 0x0a, 0xf4, 0x4c, 0x66, 0x43, 0x12, 0x25, 0x94, 0x0b, 0x72, 0xba, 0xfe,
	0x57, 0x59, 0xcb, 0x07, 0x25, 0xfb, 0xb1, 0x3f, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xaa,
	0xa9, 0x2a, 0x75, 0x03, 0x00, 0x00,
}

func (m *QueueState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HighIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HighIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.LowIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LowIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiCoinPendingRewardsEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiCoinPendingRewardsEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiCoinPendingRewardsEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationDate != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreationDate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiCoinRefundPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiCoinRefundPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiCoinRefundPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MultiCoinRefundDenomEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiCoinRefundDenomEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiCoinRefundDenomEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolWeights) > 0 {
		for iNdEx := len(m.PoolWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiCoinRefundPoolWeightEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiCoinRefundPoolWeightEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiCoinRefundPoolWeightEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueueState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowIndex != 0 {
		n += 1 + sovTypes(uint64(m.LowIndex))
	}
	if m.HighIndex != 0 {
		n += 1 + sovTypes(uint64(m.HighIndex))
	}
	return n
}

func (m *MultiCoinPendingRewardsEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovTypes(uint64(m.Index))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.CreationDate != 0 {
		n += 1 + sovTypes(uint64(m.CreationDate))
	}
	return n
}

func (m *MultiCoinRefundPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MultiCoinRefundDenomEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.PoolWeights) > 0 {
		for _, e := range m.PoolWeights {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *MultiCoinRefundPoolWeightEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTypes(uint64(m.PoolId))
	}
	l = m.Weight.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueueState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowIndex", wireType)
			}
			m.LowIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighIndex", wireType)
			}
			m.HighIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiCoinPendingRewardsEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiCoinPendingRewardsEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiCoinPendingRewardsEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, types.Coin{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			m.CreationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiCoinRefundPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiCoinRefundPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiCoinRefundPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &MultiCoinRefundDenomEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiCoinRefundDenomEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiCoinRefundDenomEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiCoinRefundDenomEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolWeights = append(m.PoolWeights, &MultiCoinRefundPoolWeightEntry{})
			if err := m.PoolWeights[len(m.PoolWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiCoinRefundPoolWeightEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiCoinRefundPoolWeightEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiCoinRefundPoolWeightEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
