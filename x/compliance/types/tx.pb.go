// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/compliance/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams defines a SDK message for updating the module parameters.
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// payload defines the x/compliance parameters to update.
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e334ee27ef03cb7, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

// MsgUpdateParamsResponse defines the Msg/UpdateParams response type.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e334ee27ef03cb7, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgEnableMultiCoinReward enables multi-coin rewards for the sender address
// and claims all current pending rewards.
type MsgToggleMultiCoinRewards struct {
	// creator ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// enabled ...
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *MsgToggleMultiCoinRewards) Reset()         { *m = MsgToggleMultiCoinRewards{} }
func (m *MsgToggleMultiCoinRewards) String() string { return proto.CompactTextString(m) }
func (*MsgToggleMultiCoinRewards) ProtoMessage()    {}
func (*MsgToggleMultiCoinRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e334ee27ef03cb7, []int{2}
}
func (m *MsgToggleMultiCoinRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleMultiCoinRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleMultiCoinRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleMultiCoinRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleMultiCoinRewards.Merge(m, src)
}
func (m *MsgToggleMultiCoinRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleMultiCoinRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleMultiCoinRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleMultiCoinRewards proto.InternalMessageInfo

func (m *MsgToggleMultiCoinRewards) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgToggleMultiCoinRewards) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// MsgEnableMultiCoinRewardResponse ...
type MsgToggleMultiCoinRewardsResponse struct {
}

func (m *MsgToggleMultiCoinRewardsResponse) Reset()         { *m = MsgToggleMultiCoinRewardsResponse{} }
func (m *MsgToggleMultiCoinRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgToggleMultiCoinRewardsResponse) ProtoMessage()    {}
func (*MsgToggleMultiCoinRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e334ee27ef03cb7, []int{3}
}
func (m *MsgToggleMultiCoinRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgToggleMultiCoinRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgToggleMultiCoinRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgToggleMultiCoinRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgToggleMultiCoinRewardsResponse.Merge(m, src)
}
func (m *MsgToggleMultiCoinRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgToggleMultiCoinRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgToggleMultiCoinRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgToggleMultiCoinRewardsResponse proto.InternalMessageInfo

// MsgEnableMultiCoinReward enables multi-coin rewards for the sender address
// and claims all current pending rewards.
type MsgSetMultiCoinRewardsRefundPolicy struct {
	// creator ...
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// policy ...
	Policy *MultiCoinRefundPolicy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *MsgSetMultiCoinRewardsRefundPolicy) Reset()         { *m = MsgSetMultiCoinRewardsRefundPolicy{} }
func (m *MsgSetMultiCoinRewardsRefundPolicy) String() string { return proto.CompactTextString(m) }
func (*MsgSetMultiCoinRewardsRefundPolicy) ProtoMessage()    {}
func (*MsgSetMultiCoinRewardsRefundPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e334ee27ef03cb7, []int{4}
}
func (m *MsgSetMultiCoinRewardsRefundPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMultiCoinRewardsRefundPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMultiCoinRewardsRefundPolicy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMultiCoinRewardsRefundPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMultiCoinRewardsRefundPolicy.Merge(m, src)
}
func (m *MsgSetMultiCoinRewardsRefundPolicy) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMultiCoinRewardsRefundPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMultiCoinRewardsRefundPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMultiCoinRewardsRefundPolicy proto.InternalMessageInfo

func (m *MsgSetMultiCoinRewardsRefundPolicy) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetMultiCoinRewardsRefundPolicy) GetPolicy() *MultiCoinRefundPolicy {
	if m != nil {
		return m.Policy
	}
	return nil
}

// MsgEnableMultiCoinRewardResponse ...
type MsgSetMultiCoinRewardsRefundPolicyResponse struct {
}

func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) Reset() {
	*m = MsgSetMultiCoinRewardsRefundPolicyResponse{}
}
func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgSetMultiCoinRewardsRefundPolicyResponse) ProtoMessage() {}
func (*MsgSetMultiCoinRewardsRefundPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e334ee27ef03cb7, []int{5}
}
func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMultiCoinRewardsRefundPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMultiCoinRewardsRefundPolicyResponse.Merge(m, src)
}
func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMultiCoinRewardsRefundPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMultiCoinRewardsRefundPolicyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "kyve.compliance.v1beta1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "kyve.compliance.v1beta1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgToggleMultiCoinRewards)(nil), "kyve.compliance.v1beta1.MsgToggleMultiCoinRewards")
	proto.RegisterType((*MsgToggleMultiCoinRewardsResponse)(nil), "kyve.compliance.v1beta1.MsgToggleMultiCoinRewardsResponse")
	proto.RegisterType((*MsgSetMultiCoinRewardsRefundPolicy)(nil), "kyve.compliance.v1beta1.MsgSetMultiCoinRewardsRefundPolicy")
	proto.RegisterType((*MsgSetMultiCoinRewardsRefundPolicyResponse)(nil), "kyve.compliance.v1beta1.MsgSetMultiCoinRewardsRefundPolicyResponse")
}

func init() { proto.RegisterFile("kyve/compliance/v1beta1/tx.proto", fileDescriptor_0e334ee27ef03cb7) }

var fileDescriptor_0e334ee27ef03cb7 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x77, 0x2c, 0x56, 0x3b, 0x16, 0x85, 0x20, 0x6e, 0x36, 0x87, 0x50, 0xd3, 0x4b, 0x59,
	0x34, 0xe3, 0xae, 0xe0, 0x61, 0x3d, 0xd9, 0xa2, 0x20, 0x12, 0x29, 0xa9, 0x0a, 0x0a, 0x22, 0x93,
	0x64, 0x9c, 0x1d, 0x9b, 0x64, 0xc2, 0xcc, 0x64, 0xdb, 0xdc, 0xc4, 0x93, 0x47, 0x0f, 0x7e, 0x02,
	0x4f, 0x1e, 0x7b, 0xf0, 0x43, 0x78, 0x2c, 0x9e, 0x3c, 0xca, 0xee, 0xa1, 0x5f, 0x43, 0xf2, 0xaf,
	0xe9, 0xb6, 0x66, 0xab, 0x78, 0x0a, 0x2f, 0xef, 0xef, 0x79, 0x9f, 0x27, 0xf3, 0xf2, 0xc2, 0xb5,
	0xdd, 0x6c, 0x42, 0x90, 0xcf, 0xa3, 0x24, 0x64, 0x38, 0xf6, 0x09, 0x9a, 0x0c, 0x3c, 0xa2, 0xf0,
	0x00, 0xa9, 0x7d, 0x3b, 0x11, 0x5c, 0x71, 0xad, 0x9b, 0x13, 0x76, 0x43, 0xd8, 0x15, 0x61, 0x74,
	0x7d, 0x2e, 0x23, 0x2e, 0x51, 0x24, 0x29, 0x9a, 0x0c, 0xf2, 0x4f, 0xa9, 0x30, 0x7a, 0x65, 0xe3,
	0x4d, 0x51, 0xa1, 0xb2, 0xa8, 0x5a, 0xeb, 0xad, 0x76, 0x59, 0x42, 0x2a, 0xc8, 0x92, 0xf0, 0x9a,
	0x23, 0xe9, 0xf3, 0x24, 0xc0, 0x8a, 0x6c, 0x63, 0x81, 0x23, 0xa9, 0xdd, 0x83, 0x2b, 0x38, 0x55,
	0x63, 0x2e, 0x98, 0xca, 0x74, 0xb0, 0x06, 0x36, 0x56, 0x36, 0xf5, 0x1f, 0xdf, 0x6e, 0x5f, 0xaf,
	0x86, 0x3f, 0x08, 0x02, 0x41, 0xa4, 0xdc, 0x51, 0x82, 0xc5, 0xd4, 0x6d, 0x50, 0x4d, 0x87, 0x97,
	0x12, 0x9c, 0x85, 0x1c, 0x07, 0xfa, 0x85, 0x5c, 0xe5, 0xd6, 0xe5, 0xe8, 0xea, 0x87, 0xa3, 0x83,
	0x7e, 0x43, 0x5a, 0x3d, 0xd8, 0x3d, 0x65, 0xea, 0x12, 0x99, 0xf0, 0x58, 0x12, 0xeb, 0x35, 0xec,
	0x39, 0x92, 0x3e, 0xe3, 0x94, 0x86, 0xc4, 0x49, 0x43, 0xc5, 0xb6, 0x38, 0x8b, 0x5d, 0xb2, 0x87,
	0x45, 0x20, 0x73, 0x07, 0x5f, 0x10, 0xac, 0xb8, 0x28, 0x73, 0xb9, 0x75, 0x99, 0x77, 0x48, 0x8c,
	0xbd, 0x90, 0x94, 0xde, 0x97, 0xdd, 0xba, 0x1c, 0xad, 0xe6, 0xde, 0x35, 0x67, 0xad, 0xc3, 0x9b,
	0xad, 0xe3, 0x8f, 0x33, 0x7c, 0x06, 0xd0, 0x72, 0x24, 0xdd, 0x21, 0xea, 0x2c, 0xf2, 0x36, 0x8d,
	0x83, 0x6d, 0x1e, 0x32, 0x3f, 0x5b, 0x90, 0xe6, 0x11, 0x5c, 0x4e, 0x0a, 0xa6, 0x08, 0x73, 0x65,
	0x68, 0xdb, 0x2d, 0x7b, 0xb5, 0x4f, 0x18, 0x34, 0x93, 0xdd, 0x4a, 0x7d, 0x2a, 0xfb, 0x2d, 0xd8,
	0x3f, 0x3f, 0x55, 0xfd, 0x13, 0xc3, 0xaf, 0x4b, 0x70, 0xc9, 0x91, 0x54, 0x7b, 0x07, 0x57, 0xe7,
	0xb6, 0xbb, 0xd1, 0x9e, 0x65, 0x7e, 0x25, 0xc6, 0x9d, 0xbf, 0x25, 0x6b, 0x4f, 0xed, 0x23, 0x80,
	0x37, 0x5a, 0x56, 0x37, 0x5c, 0x34, 0xec, 0xcf, 0x1a, 0x63, 0xf4, 0xef, 0x9a, 0xe3, 0x28, 0x5f,
	0x00, 0x34, 0xcf, 0x3e, 0xd5, 0xdc, 0xfe, 0xee, 0x2f, 0x1a, 0x7f, 0xce, 0x33, 0x1b, 0x5b, 0xff,
	0x21, 0xae, 0x43, 0x1a, 0x17, 0xdf, 0x1f, 0x1d, 0xf4, 0xc1, 0xe6, 0xe3, 0xef, 0x53, 0x13, 0x1c,
	0x4e, 0x4d, 0xf0, 0x6b, 0x6a, 0x82, 0x4f, 0x33, 0xb3, 0x73, 0x38, 0x33, 0x3b, 0x3f, 0x67, 0x66,
	0xe7, 0x15, 0xa2, 0x4c, 0x8d, 0x53, 0x2f, 0xb7, 0x41, 0x4f, 0x5e, 0xbe, 0x78, 0xf8, 0x94, 0xa8,
	0x3d, 0x2e, 0x76, 0x91, 0x3f, 0xc6, 0x2c, 0x46, 0xfb, 0x27, 0x8f, 0xbb, 0x38, 0x6a, 0x6f, 0xb9,
	0xb8, 0xea, 0xbb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x46, 0x49, 0x30, 0x29, 0x6b, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a governance operation for updating the x/compliance module
	// parameters. The authority is hard-coded to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// ToggleMultiCoinRewards ...
	ToggleMultiCoinRewards(ctx context.Context, in *MsgToggleMultiCoinRewards, opts ...grpc.CallOption) (*MsgToggleMultiCoinRewardsResponse, error)
	// SetMultiCoinRewardRefundPolicy ...
	SetMultiCoinRewardRefundPolicy(ctx context.Context, in *MsgSetMultiCoinRewardsRefundPolicy, opts ...grpc.CallOption) (*MsgSetMultiCoinRewardsRefundPolicyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/kyve.compliance.v1beta1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleMultiCoinRewards(ctx context.Context, in *MsgToggleMultiCoinRewards, opts ...grpc.CallOption) (*MsgToggleMultiCoinRewardsResponse, error) {
	out := new(MsgToggleMultiCoinRewardsResponse)
	err := c.cc.Invoke(ctx, "/kyve.compliance.v1beta1.Msg/ToggleMultiCoinRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMultiCoinRewardRefundPolicy(ctx context.Context, in *MsgSetMultiCoinRewardsRefundPolicy, opts ...grpc.CallOption) (*MsgSetMultiCoinRewardsRefundPolicyResponse, error) {
	out := new(MsgSetMultiCoinRewardsRefundPolicyResponse)
	err := c.cc.Invoke(ctx, "/kyve.compliance.v1beta1.Msg/SetMultiCoinRewardRefundPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a governance operation for updating the x/compliance module
	// parameters. The authority is hard-coded to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// ToggleMultiCoinRewards ...
	ToggleMultiCoinRewards(context.Context, *MsgToggleMultiCoinRewards) (*MsgToggleMultiCoinRewardsResponse, error)
	// SetMultiCoinRewardRefundPolicy ...
	SetMultiCoinRewardRefundPolicy(context.Context, *MsgSetMultiCoinRewardsRefundPolicy) (*MsgSetMultiCoinRewardsRefundPolicyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) ToggleMultiCoinRewards(ctx context.Context, req *MsgToggleMultiCoinRewards) (*MsgToggleMultiCoinRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleMultiCoinRewards not implemented")
}
func (*UnimplementedMsgServer) SetMultiCoinRewardRefundPolicy(ctx context.Context, req *MsgSetMultiCoinRewardsRefundPolicy) (*MsgSetMultiCoinRewardsRefundPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMultiCoinRewardRefundPolicy not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.compliance.v1beta1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleMultiCoinRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleMultiCoinRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleMultiCoinRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.compliance.v1beta1.Msg/ToggleMultiCoinRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleMultiCoinRewards(ctx, req.(*MsgToggleMultiCoinRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMultiCoinRewardRefundPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMultiCoinRewardsRefundPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMultiCoinRewardRefundPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.compliance.v1beta1.Msg/SetMultiCoinRewardRefundPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMultiCoinRewardRefundPolicy(ctx, req.(*MsgSetMultiCoinRewardsRefundPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.compliance.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "ToggleMultiCoinRewards",
			Handler:    _Msg_ToggleMultiCoinRewards_Handler,
		},
		{
			MethodName: "SetMultiCoinRewardRefundPolicy",
			Handler:    _Msg_SetMultiCoinRewardRefundPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/compliance/v1beta1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgToggleMultiCoinRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleMultiCoinRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleMultiCoinRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgToggleMultiCoinRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgToggleMultiCoinRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgToggleMultiCoinRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMultiCoinRewardsRefundPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMultiCoinRewardsRefundPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMultiCoinRewardsRefundPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgToggleMultiCoinRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *MsgToggleMultiCoinRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMultiCoinRewardsRefundPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleMultiCoinRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleMultiCoinRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleMultiCoinRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgToggleMultiCoinRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgToggleMultiCoinRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgToggleMultiCoinRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMultiCoinRewardsRefundPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMultiCoinRewardsRefundPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMultiCoinRewardsRefundPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &MultiCoinRefundPolicy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMultiCoinRewardsRefundPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMultiCoinRewardsRefundPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMultiCoinRewardsRefundPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
