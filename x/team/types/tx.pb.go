// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/team/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgClaimUnlockedTokens ...
type MsgClaimUnlocked struct {
	// authority is the foundation which is allowed to payout unlocked tokens
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// id is the unique identifier of the team member
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// amount of $KYVE that will be paid to the recipient and marked as deducted from the unlocked amount.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// recipient is the recipient address chosen by the team member.
	Recipient string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *MsgClaimUnlocked) Reset()         { *m = MsgClaimUnlocked{} }
func (m *MsgClaimUnlocked) String() string { return proto.CompactTextString(m) }
func (*MsgClaimUnlocked) ProtoMessage()    {}
func (*MsgClaimUnlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{0}
}
func (m *MsgClaimUnlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimUnlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimUnlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimUnlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimUnlocked.Merge(m, src)
}
func (m *MsgClaimUnlocked) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimUnlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimUnlocked.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimUnlocked proto.InternalMessageInfo

func (m *MsgClaimUnlocked) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgClaimUnlocked) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgClaimUnlocked) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgClaimUnlocked) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// MsgClaimUnlockedResponse defines the Msg/ClaimUnlockedTokens response type.
type MsgClaimUnlockedResponse struct {
}

func (m *MsgClaimUnlockedResponse) Reset()         { *m = MsgClaimUnlockedResponse{} }
func (m *MsgClaimUnlockedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimUnlockedResponse) ProtoMessage()    {}
func (*MsgClaimUnlockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{1}
}
func (m *MsgClaimUnlockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimUnlockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimUnlockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimUnlockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimUnlockedResponse.Merge(m, src)
}
func (m *MsgClaimUnlockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimUnlockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimUnlockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimUnlockedResponse proto.InternalMessageInfo

// MsgClaimAuthorityRewards ...
type MsgClaimAuthorityRewards struct {
	// authority is the foundation which is allowed to payout unlocked tokens
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// amount of $KYVE that will be paid to the recipient and marked as deducted from the authority inflation rewards
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// recipient is the recipient address chosen by the team member.
	Recipient string `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *MsgClaimAuthorityRewards) Reset()         { *m = MsgClaimAuthorityRewards{} }
func (m *MsgClaimAuthorityRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAuthorityRewards) ProtoMessage()    {}
func (*MsgClaimAuthorityRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{2}
}
func (m *MsgClaimAuthorityRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAuthorityRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAuthorityRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAuthorityRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAuthorityRewards.Merge(m, src)
}
func (m *MsgClaimAuthorityRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAuthorityRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAuthorityRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAuthorityRewards proto.InternalMessageInfo

func (m *MsgClaimAuthorityRewards) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgClaimAuthorityRewards) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgClaimAuthorityRewards) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// MsgClaimAuthorityRewardsResponse defines the Msg/ClaimAuthorityRewards response type.
type MsgClaimAuthorityRewardsResponse struct {
}

func (m *MsgClaimAuthorityRewardsResponse) Reset()         { *m = MsgClaimAuthorityRewardsResponse{} }
func (m *MsgClaimAuthorityRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAuthorityRewardsResponse) ProtoMessage()    {}
func (*MsgClaimAuthorityRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{3}
}
func (m *MsgClaimAuthorityRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAuthorityRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAuthorityRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAuthorityRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAuthorityRewardsResponse.Merge(m, src)
}
func (m *MsgClaimAuthorityRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAuthorityRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAuthorityRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAuthorityRewardsResponse proto.InternalMessageInfo

// MsgClaimAccountRewards ...
type MsgClaimAccountRewards struct {
	// authority is the foundation which is allowed to payout unlocked tokens
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// id is the unique identifier of the team member
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// amount of $KYVE that will be paid to the recipient and marked as deducted from the inflation rewards
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// recipient is the recipient address chosen by the team member.
	Recipient string `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *MsgClaimAccountRewards) Reset()         { *m = MsgClaimAccountRewards{} }
func (m *MsgClaimAccountRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAccountRewards) ProtoMessage()    {}
func (*MsgClaimAccountRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{4}
}
func (m *MsgClaimAccountRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAccountRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAccountRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAccountRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAccountRewards.Merge(m, src)
}
func (m *MsgClaimAccountRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAccountRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAccountRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAccountRewards proto.InternalMessageInfo

func (m *MsgClaimAccountRewards) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgClaimAccountRewards) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgClaimAccountRewards) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MsgClaimAccountRewards) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

// MsgClaimAccountRewardsResponse defines the Msg/ClaimAccountRewards response type.
type MsgClaimAccountRewardsResponse struct {
}

func (m *MsgClaimAccountRewardsResponse) Reset()         { *m = MsgClaimAccountRewardsResponse{} }
func (m *MsgClaimAccountRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimAccountRewardsResponse) ProtoMessage()    {}
func (*MsgClaimAccountRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{5}
}
func (m *MsgClaimAccountRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimAccountRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimAccountRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimAccountRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimAccountRewardsResponse.Merge(m, src)
}
func (m *MsgClaimAccountRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimAccountRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimAccountRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimAccountRewardsResponse proto.InternalMessageInfo

// MsgClawback ...
type MsgClawback struct {
	// authority is the foundation which is allowed to modify team accounts
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// id is the unique identifier of the team member
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// clawback is a unix timestamp (in seconds) of when the clawback should be applied
	Clawback uint64 `protobuf:"varint,3,opt,name=clawback,proto3" json:"clawback,omitempty"`
}

func (m *MsgClawback) Reset()         { *m = MsgClawback{} }
func (m *MsgClawback) String() string { return proto.CompactTextString(m) }
func (*MsgClawback) ProtoMessage()    {}
func (*MsgClawback) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{6}
}
func (m *MsgClawback) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClawback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClawback.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClawback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClawback.Merge(m, src)
}
func (m *MsgClawback) XXX_Size() int {
	return m.Size()
}
func (m *MsgClawback) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClawback.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClawback proto.InternalMessageInfo

func (m *MsgClawback) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgClawback) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgClawback) GetClawback() uint64 {
	if m != nil {
		return m.Clawback
	}
	return 0
}

// MsgClawbackResponse defines the Msg/Clawback response type.
type MsgClawbackResponse struct {
}

func (m *MsgClawbackResponse) Reset()         { *m = MsgClawbackResponse{} }
func (m *MsgClawbackResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClawbackResponse) ProtoMessage()    {}
func (*MsgClawbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{7}
}
func (m *MsgClawbackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClawbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClawbackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClawbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClawbackResponse.Merge(m, src)
}
func (m *MsgClawbackResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClawbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClawbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClawbackResponse proto.InternalMessageInfo

// MsgCreateTeamVestingAccount ...
type MsgCreateTeamVestingAccount struct {
	// authority ...
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// total_allocation is the number of tokens reserved for this team member.
	TotalAllocation uint64 `protobuf:"varint,2,opt,name=total_allocation,json=totalAllocation,proto3" json:"total_allocation,omitempty"`
	// commencement is the unix timestamp of the member's official start date.
	Commencement uint64 `protobuf:"varint,3,opt,name=commencement,proto3" json:"commencement,omitempty"`
}

func (m *MsgCreateTeamVestingAccount) Reset()         { *m = MsgCreateTeamVestingAccount{} }
func (m *MsgCreateTeamVestingAccount) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTeamVestingAccount) ProtoMessage()    {}
func (*MsgCreateTeamVestingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{8}
}
func (m *MsgCreateTeamVestingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTeamVestingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTeamVestingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTeamVestingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTeamVestingAccount.Merge(m, src)
}
func (m *MsgCreateTeamVestingAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTeamVestingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTeamVestingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTeamVestingAccount proto.InternalMessageInfo

func (m *MsgCreateTeamVestingAccount) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgCreateTeamVestingAccount) GetTotalAllocation() uint64 {
	if m != nil {
		return m.TotalAllocation
	}
	return 0
}

func (m *MsgCreateTeamVestingAccount) GetCommencement() uint64 {
	if m != nil {
		return m.Commencement
	}
	return 0
}

// MsgCreateTeamVestingAccountResponse defines the Msg/CreateTeamVestingAccount response type.
type MsgCreateTeamVestingAccountResponse struct {
}

func (m *MsgCreateTeamVestingAccountResponse) Reset()         { *m = MsgCreateTeamVestingAccountResponse{} }
func (m *MsgCreateTeamVestingAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTeamVestingAccountResponse) ProtoMessage()    {}
func (*MsgCreateTeamVestingAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ad042ec4c659ded, []int{9}
}
func (m *MsgCreateTeamVestingAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTeamVestingAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTeamVestingAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTeamVestingAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTeamVestingAccountResponse.Merge(m, src)
}
func (m *MsgCreateTeamVestingAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTeamVestingAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTeamVestingAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTeamVestingAccountResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgClaimUnlocked)(nil), "kyve.team.v1beta1.MsgClaimUnlocked")
	proto.RegisterType((*MsgClaimUnlockedResponse)(nil), "kyve.team.v1beta1.MsgClaimUnlockedResponse")
	proto.RegisterType((*MsgClaimAuthorityRewards)(nil), "kyve.team.v1beta1.MsgClaimAuthorityRewards")
	proto.RegisterType((*MsgClaimAuthorityRewardsResponse)(nil), "kyve.team.v1beta1.MsgClaimAuthorityRewardsResponse")
	proto.RegisterType((*MsgClaimAccountRewards)(nil), "kyve.team.v1beta1.MsgClaimAccountRewards")
	proto.RegisterType((*MsgClaimAccountRewardsResponse)(nil), "kyve.team.v1beta1.MsgClaimAccountRewardsResponse")
	proto.RegisterType((*MsgClawback)(nil), "kyve.team.v1beta1.MsgClawback")
	proto.RegisterType((*MsgClawbackResponse)(nil), "kyve.team.v1beta1.MsgClawbackResponse")
	proto.RegisterType((*MsgCreateTeamVestingAccount)(nil), "kyve.team.v1beta1.MsgCreateTeamVestingAccount")
	proto.RegisterType((*MsgCreateTeamVestingAccountResponse)(nil), "kyve.team.v1beta1.MsgCreateTeamVestingAccountResponse")
}

func init() { proto.RegisterFile("kyve/team/v1beta1/tx.proto", fileDescriptor_1ad042ec4c659ded) }

var fileDescriptor_1ad042ec4c659ded = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xed, 0xa6, 0xf9, 0x55, 0xed, 0xfc, 0xa0, 0x14, 0x97, 0x16, 0xb3, 0x48, 0x56, 0x94, 0x0a,
	0xd4, 0x14, 0x61, 0x2b, 0x54, 0xea, 0x81, 0x5b, 0x5a, 0x71, 0x42, 0xe5, 0x10, 0xa0, 0x12, 0x5c,
	0xaa, 0xcd, 0x7a, 0xe5, 0xac, 0x12, 0x7b, 0x23, 0xef, 0x26, 0x69, 0x6e, 0xd0, 0x4f, 0xc0, 0x47,
	0xa9, 0x50, 0x0f, 0x88, 0x13, 0x47, 0x8e, 0x15, 0x27, 0x8e, 0x28, 0x39, 0xf4, 0x6b, 0x20, 0xc7,
	0xce, 0x86, 0xfc, 0x71, 0x68, 0x03, 0xe2, 0x14, 0xcd, 0xbc, 0x37, 0x33, 0xef, 0x65, 0xe4, 0x59,
	0xc0, 0xb5, 0x4e, 0x8b, 0x39, 0x8a, 0x11, 0xdf, 0x69, 0x15, 0x2b, 0x4c, 0x91, 0xa2, 0xa3, 0x4e,
	0xec, 0x46, 0x28, 0x94, 0x30, 0x6e, 0x47, 0x98, 0x1d, 0x61, 0x76, 0x82, 0xe1, 0xbb, 0x54, 0x48,
	0x5f, 0x48, 0xc7, 0x97, 0x9e, 0xd3, 0x2a, 0x46, 0x3f, 0x31, 0x17, 0xdf, 0x8b, 0x81, 0xe3, 0x7e,
	0xe4, 0xc4, 0x41, 0x0c, 0xe5, 0x3f, 0x23, 0x58, 0x3b, 0x94, 0xde, 0x41, 0x9d, 0x70, 0xff, 0x75,
	0x50, 0x17, 0xb4, 0xc6, 0x5c, 0x63, 0x0f, 0x56, 0x48, 0x53, 0x55, 0x45, 0xc8, 0x55, 0xc7, 0x44,
	0x39, 0xb4, 0xbd, 0xb2, 0x6f, 0x7e, 0x3b, 0x7f, 0x7c, 0x27, 0xa9, 0x2c, 0xb9, 0x6e, 0xc8, 0xa4,
	0x7c, 0xa9, 0x42, 0x1e, 0x78, 0xe5, 0x21, 0xd5, 0x58, 0x85, 0x0c, 0x77, 0xcd, 0x4c, 0x0e, 0x6d,
	0x67, 0xcb, 0x19, 0xee, 0x1a, 0x9b, 0xb0, 0x44, 0x7c, 0xd1, 0x0c, 0x94, 0xb9, 0xd8, 0xcf, 0x25,
	0x51, 0xd4, 0x3f, 0x64, 0x94, 0x37, 0x38, 0x0b, 0x94, 0x99, 0xfd, 0x5d, 0x7f, 0x4d, 0x7d, 0xba,
	0x7a, 0x7a, 0x79, 0xb6, 0x33, 0x9c, 0x97, 0xc7, 0x60, 0x8e, 0x6b, 0x2f, 0x33, 0xd9, 0x10, 0x81,
	0x64, 0xf9, 0x8f, 0x68, 0x08, 0x96, 0x06, 0x15, 0x65, 0xd6, 0x26, 0xa1, 0x2b, 0xe7, 0x36, 0x38,
	0x34, 0x94, 0x49, 0x37, 0xb4, 0x38, 0xbf, 0xa1, 0x3c, 0xe4, 0xd2, 0x34, 0x6b, 0x63, 0x5f, 0x10,
	0x6c, 0x6a, 0x12, 0xa5, 0xd1, 0xfc, 0x3f, 0xb5, 0xf5, 0xaf, 0xf7, 0x96, 0x03, 0x6b, 0xba, 0x03,
	0x6d, 0xf2, 0x3d, 0x82, 0xff, 0x63, 0x4a, 0xbb, 0x42, 0x68, 0xed, 0xaf, 0x39, 0xc3, 0xb0, 0x4c,
	0x93, 0x9e, 0x89, 0x37, 0x1d, 0x4f, 0xa8, 0xdc, 0x80, 0xf5, 0x5f, 0x24, 0x68, 0x69, 0xe7, 0x08,
	0xee, 0x47, 0xf9, 0x90, 0x11, 0xc5, 0x5e, 0x31, 0xe2, 0x1f, 0x31, 0xa9, 0x78, 0xe0, 0x25, 0x4e,
	0xe6, 0x96, 0x5a, 0x80, 0x35, 0x25, 0x14, 0xa9, 0x1f, 0x93, 0x7a, 0x5d, 0x50, 0xa2, 0xb8, 0x08,
	0x12, 0xe1, 0xb7, 0xfa, 0xf9, 0x92, 0x4e, 0x1b, 0x79, 0xb8, 0x41, 0x85, 0xef, 0xb3, 0x80, 0x32,
	0x9f, 0xe9, 0x2d, 0x8d, 0xe4, 0x26, 0xdc, 0x3c, 0x80, 0xad, 0x19, 0xaa, 0x07, 0xee, 0x9e, 0x7c,
	0xca, 0xc2, 0xe2, 0xa1, 0xf4, 0x0c, 0x02, 0x37, 0x47, 0x6f, 0xc2, 0x96, 0x3d, 0x71, 0x70, 0xec,
	0xf1, 0x8f, 0x0f, 0x3f, 0xba, 0x02, 0x69, 0x30, 0xca, 0x28, 0xc3, 0xb2, 0xde, 0xaf, 0x95, 0x5a,
	0xd8, 0xc7, 0xf1, 0xc3, 0xd9, 0xb8, 0xee, 0x79, 0x8a, 0xc0, 0x4c, 0xdd, 0x8c, 0x9d, 0xd2, 0x24,
	0x85, 0x8f, 0xf7, 0xae, 0xc7, 0xd7, 0x22, 0x3a, 0xb0, 0x31, 0xfd, 0xec, 0xcc, 0xfa, 0x7b, 0xc6,
	0xc9, 0x78, 0xf7, 0x1a, 0x64, 0x3d, 0x5a, 0xc2, 0xfa, 0xb4, 0xc3, 0x50, 0x98, 0xd5, 0x6b, 0x84,
	0x8a, 0x8b, 0x57, 0xa6, 0x0e, 0x86, 0xe2, 0xff, 0xde, 0x5d, 0x9e, 0xed, 0xa0, 0xfd, 0x83, 0xaf,
	0x5d, 0x0b, 0x5d, 0x74, 0x2d, 0xf4, 0xa3, 0x6b, 0xa1, 0x0f, 0x3d, 0x6b, 0xe1, 0xa2, 0x67, 0x2d,
	0x7c, 0xef, 0x59, 0x0b, 0x6f, 0x0b, 0x1e, 0x57, 0xd5, 0x66, 0xc5, 0xa6, 0xc2, 0x77, 0x9e, 0xbf,
	0x39, 0x7a, 0xf6, 0x82, 0xa9, 0xb6, 0x08, 0x6b, 0x0e, 0xad, 0x12, 0x1e, 0x38, 0x27, 0xf1, 0x0b,
	0xa7, 0x3a, 0x0d, 0x26, 0x2b, 0x4b, 0xfd, 0x67, 0x69, 0xf7, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x04, 0xce, 0xde, 0x1c, 0xfb, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// ClaimUnlocked ...
	ClaimUnlocked(ctx context.Context, in *MsgClaimUnlocked, opts ...grpc.CallOption) (*MsgClaimUnlockedResponse, error)
	// Clawback ...
	Clawback(ctx context.Context, in *MsgClawback, opts ...grpc.CallOption) (*MsgClawbackResponse, error)
	// CreateTeamVestingAccount ...
	CreateTeamVestingAccount(ctx context.Context, in *MsgCreateTeamVestingAccount, opts ...grpc.CallOption) (*MsgCreateTeamVestingAccountResponse, error)
	// ClaimAuthorityRewards ...
	ClaimAuthorityRewards(ctx context.Context, in *MsgClaimAuthorityRewards, opts ...grpc.CallOption) (*MsgClaimAuthorityRewardsResponse, error)
	// ClaimInflationRewards ...
	ClaimAccountRewards(ctx context.Context, in *MsgClaimAccountRewards, opts ...grpc.CallOption) (*MsgClaimAccountRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ClaimUnlocked(ctx context.Context, in *MsgClaimUnlocked, opts ...grpc.CallOption) (*MsgClaimUnlockedResponse, error) {
	out := new(MsgClaimUnlockedResponse)
	err := c.cc.Invoke(ctx, "/kyve.team.v1beta1.Msg/ClaimUnlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Clawback(ctx context.Context, in *MsgClawback, opts ...grpc.CallOption) (*MsgClawbackResponse, error) {
	out := new(MsgClawbackResponse)
	err := c.cc.Invoke(ctx, "/kyve.team.v1beta1.Msg/Clawback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTeamVestingAccount(ctx context.Context, in *MsgCreateTeamVestingAccount, opts ...grpc.CallOption) (*MsgCreateTeamVestingAccountResponse, error) {
	out := new(MsgCreateTeamVestingAccountResponse)
	err := c.cc.Invoke(ctx, "/kyve.team.v1beta1.Msg/CreateTeamVestingAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimAuthorityRewards(ctx context.Context, in *MsgClaimAuthorityRewards, opts ...grpc.CallOption) (*MsgClaimAuthorityRewardsResponse, error) {
	out := new(MsgClaimAuthorityRewardsResponse)
	err := c.cc.Invoke(ctx, "/kyve.team.v1beta1.Msg/ClaimAuthorityRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimAccountRewards(ctx context.Context, in *MsgClaimAccountRewards, opts ...grpc.CallOption) (*MsgClaimAccountRewardsResponse, error) {
	out := new(MsgClaimAccountRewardsResponse)
	err := c.cc.Invoke(ctx, "/kyve.team.v1beta1.Msg/ClaimAccountRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// ClaimUnlocked ...
	ClaimUnlocked(context.Context, *MsgClaimUnlocked) (*MsgClaimUnlockedResponse, error)
	// Clawback ...
	Clawback(context.Context, *MsgClawback) (*MsgClawbackResponse, error)
	// CreateTeamVestingAccount ...
	CreateTeamVestingAccount(context.Context, *MsgCreateTeamVestingAccount) (*MsgCreateTeamVestingAccountResponse, error)
	// ClaimAuthorityRewards ...
	ClaimAuthorityRewards(context.Context, *MsgClaimAuthorityRewards) (*MsgClaimAuthorityRewardsResponse, error)
	// ClaimInflationRewards ...
	ClaimAccountRewards(context.Context, *MsgClaimAccountRewards) (*MsgClaimAccountRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ClaimUnlocked(ctx context.Context, req *MsgClaimUnlocked) (*MsgClaimUnlockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimUnlocked not implemented")
}
func (*UnimplementedMsgServer) Clawback(ctx context.Context, req *MsgClawback) (*MsgClawbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clawback not implemented")
}
func (*UnimplementedMsgServer) CreateTeamVestingAccount(ctx context.Context, req *MsgCreateTeamVestingAccount) (*MsgCreateTeamVestingAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamVestingAccount not implemented")
}
func (*UnimplementedMsgServer) ClaimAuthorityRewards(ctx context.Context, req *MsgClaimAuthorityRewards) (*MsgClaimAuthorityRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAuthorityRewards not implemented")
}
func (*UnimplementedMsgServer) ClaimAccountRewards(ctx context.Context, req *MsgClaimAccountRewards) (*MsgClaimAccountRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimAccountRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ClaimUnlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimUnlocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimUnlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.team.v1beta1.Msg/ClaimUnlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimUnlocked(ctx, req.(*MsgClaimUnlocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Clawback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClawback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Clawback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.team.v1beta1.Msg/Clawback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Clawback(ctx, req.(*MsgClawback))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTeamVestingAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTeamVestingAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTeamVestingAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.team.v1beta1.Msg/CreateTeamVestingAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTeamVestingAccount(ctx, req.(*MsgCreateTeamVestingAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimAuthorityRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimAuthorityRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimAuthorityRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.team.v1beta1.Msg/ClaimAuthorityRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimAuthorityRewards(ctx, req.(*MsgClaimAuthorityRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimAccountRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimAccountRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimAccountRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.team.v1beta1.Msg/ClaimAccountRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimAccountRewards(ctx, req.(*MsgClaimAccountRewards))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.team.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimUnlocked",
			Handler:    _Msg_ClaimUnlocked_Handler,
		},
		{
			MethodName: "Clawback",
			Handler:    _Msg_Clawback_Handler,
		},
		{
			MethodName: "CreateTeamVestingAccount",
			Handler:    _Msg_CreateTeamVestingAccount_Handler,
		},
		{
			MethodName: "ClaimAuthorityRewards",
			Handler:    _Msg_ClaimAuthorityRewards_Handler,
		},
		{
			MethodName: "ClaimAccountRewards",
			Handler:    _Msg_ClaimAccountRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/team/v1beta1/tx.proto",
}

func (m *MsgClaimUnlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimUnlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimUnlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimUnlockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimUnlockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimUnlockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimAuthorityRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAuthorityRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAuthorityRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAuthorityRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAuthorityRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAuthorityRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimAccountRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAccountRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAccountRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimAccountRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimAccountRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimAccountRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClawback) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClawback) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClawback) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Clawback != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Clawback))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClawbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClawbackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClawbackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTeamVestingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTeamVestingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTeamVestingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Commencement != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Commencement))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalAllocation != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.TotalAllocation))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTeamVestingAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTeamVestingAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTeamVestingAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgClaimUnlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimUnlockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimAuthorityRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimAuthorityRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimAccountRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimAccountRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClawback) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	if m.Clawback != 0 {
		n += 1 + sovTx(uint64(m.Clawback))
	}
	return n
}

func (m *MsgClawbackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTeamVestingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.TotalAllocation != 0 {
		n += 1 + sovTx(uint64(m.TotalAllocation))
	}
	if m.Commencement != 0 {
		n += 1 + sovTx(uint64(m.Commencement))
	}
	return n
}

func (m *MsgCreateTeamVestingAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgClaimUnlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimUnlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimUnlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimUnlockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimUnlockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimUnlockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAuthorityRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAuthorityRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAuthorityRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAuthorityRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAuthorityRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAuthorityRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAccountRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAccountRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAccountRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimAccountRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimAccountRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimAccountRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClawback) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClawback: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClawback: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clawback", wireType)
			}
			m.Clawback = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clawback |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClawbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClawbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClawbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTeamVestingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTeamVestingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTeamVestingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAllocation", wireType)
			}
			m.TotalAllocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAllocation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commencement", wireType)
			}
			m.Commencement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commencement |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTeamVestingAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTeamVestingAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTeamVestingAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
