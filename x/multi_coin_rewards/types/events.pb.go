// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/multi_coin_rewards/v1beta1/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventUpdateParams is an event emitted when the module parameters are updated.
// emitted_by: MsgUpdateParams
type EventUpdateParams struct {
	// old_params is the module's old parameters.
	OldParams Params `protobuf:"bytes,1,opt,name=old_params,json=oldParams,proto3" json:"old_params"`
	// new_params is the module's new parameters.
	NewParams Params `protobuf:"bytes,2,opt,name=new_params,json=newParams,proto3" json:"new_params"`
	// payload is the parameter updates that were performed.
	Payload string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *EventUpdateParams) Reset()         { *m = EventUpdateParams{} }
func (m *EventUpdateParams) String() string { return proto.CompactTextString(m) }
func (*EventUpdateParams) ProtoMessage()    {}
func (*EventUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8bb6f2da3c22458, []int{0}
}
func (m *EventUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateParams.Merge(m, src)
}
func (m *EventUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateParams proto.InternalMessageInfo

func (m *EventUpdateParams) GetOldParams() Params {
	if m != nil {
		return m.OldParams
	}
	return Params{}
}

func (m *EventUpdateParams) GetNewParams() Params {
	if m != nil {
		return m.NewParams
	}
	return Params{}
}

func (m *EventUpdateParams) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

// EventToggleMultiCoinRewards ...
type EventToggleMultiCoinRewards struct {
	// address ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// enabled ...
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// pending_rewards_claimed ...
	PendingRewardsClaimed string `protobuf:"bytes,3,opt,name=pending_rewards_claimed,json=pendingRewardsClaimed,proto3" json:"pending_rewards_claimed,omitempty"`
}

func (m *EventToggleMultiCoinRewards) Reset()         { *m = EventToggleMultiCoinRewards{} }
func (m *EventToggleMultiCoinRewards) String() string { return proto.CompactTextString(m) }
func (*EventToggleMultiCoinRewards) ProtoMessage()    {}
func (*EventToggleMultiCoinRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8bb6f2da3c22458, []int{1}
}
func (m *EventToggleMultiCoinRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventToggleMultiCoinRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventToggleMultiCoinRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventToggleMultiCoinRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventToggleMultiCoinRewards.Merge(m, src)
}
func (m *EventToggleMultiCoinRewards) XXX_Size() int {
	return m.Size()
}
func (m *EventToggleMultiCoinRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_EventToggleMultiCoinRewards.DiscardUnknown(m)
}

var xxx_messageInfo_EventToggleMultiCoinRewards proto.InternalMessageInfo

func (m *EventToggleMultiCoinRewards) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *EventToggleMultiCoinRewards) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *EventToggleMultiCoinRewards) GetPendingRewardsClaimed() string {
	if m != nil {
		return m.PendingRewardsClaimed
	}
	return ""
}

func init() {
	proto.RegisterType((*EventUpdateParams)(nil), "kyve.multi_coin_rewards.v1beta1.EventUpdateParams")
	proto.RegisterType((*EventToggleMultiCoinRewards)(nil), "kyve.multi_coin_rewards.v1beta1.EventToggleMultiCoinRewards")
}

func init() {
	proto.RegisterFile("kyve/multi_coin_rewards/v1beta1/events.proto", fileDescriptor_c8bb6f2da3c22458)
}

var fileDescriptor_c8bb6f2da3c22458 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xcd, 0x4a, 0xfb, 0x40,
	0x14, 0xc5, 0x33, 0xff, 0xbf, 0xa8, 0x1d, 0x57, 0x16, 0xc5, 0x52, 0x21, 0x2d, 0xdd, 0xd8, 0x85,
	0x64, 0xa8, 0x82, 0xee, 0x5b, 0xba, 0xf2, 0x03, 0x0d, 0x2a, 0xe8, 0x26, 0x4c, 0x32, 0x97, 0x74,
	0xe8, 0x64, 0x26, 0x24, 0xd3, 0xc6, 0x3e, 0x82, 0x3b, 0x1f, 0xab, 0xee, 0xba, 0x74, 0x25, 0xd2,
	0xbe, 0x88, 0xe4, 0x63, 0x70, 0xa1, 0x50, 0x70, 0x37, 0x97, 0x73, 0xee, 0xef, 0x9c, 0xe1, 0xe2,
	0xe3, 0xf1, 0x6c, 0x0a, 0x24, 0x9a, 0x08, 0xcd, 0xbd, 0x40, 0x71, 0xe9, 0x25, 0x90, 0xd1, 0x84,
	0xa5, 0x64, 0xda, 0xf3, 0x41, 0xd3, 0x1e, 0x81, 0x29, 0x48, 0x9d, 0x3a, 0x71, 0xa2, 0xb4, 0xaa,
	0xb7, 0x72, 0xb7, 0xf3, 0xd3, 0xed, 0x54, 0xee, 0xe6, 0x5e, 0xa8, 0x42, 0x55, 0x78, 0x49, 0xfe,
	0x2a, 0xd7, 0x9a, 0x6b, 0x43, 0x62, 0x9a, 0xd0, 0xa8, 0x0a, 0xe9, 0xbc, 0x21, 0xbc, 0x3b, 0xcc,
	0x53, 0xef, 0x63, 0x46, 0x35, 0xdc, 0x14, 0x5a, 0xfd, 0x12, 0x63, 0x25, 0x98, 0x57, 0x3a, 0x1b,
	0xa8, 0x8d, 0xba, 0x3b, 0x27, 0x47, 0xce, 0x9a, 0x3e, 0x4e, 0xb9, 0xdc, 0xdf, 0x98, 0x7f, 0xb4,
	0x2c, 0xb7, 0xa6, 0x04, 0xfb, 0xa6, 0x49, 0xc8, 0x0c, 0xed, 0xdf, 0x9f, 0x68, 0x12, 0xb2, 0x8a,
	0xd6, 0xc0, 0x5b, 0x31, 0x9d, 0x09, 0x45, 0x59, 0xe3, 0x7f, 0x1b, 0x75, 0x6b, 0xae, 0x19, 0x3b,
	0x2f, 0x08, 0x1f, 0x16, 0x7f, 0xb9, 0x53, 0x61, 0x28, 0xe0, 0x2a, 0x67, 0x0f, 0x14, 0x97, 0x6e,
	0x49, 0xce, 0x37, 0x29, 0x63, 0x09, 0xa4, 0xe5, 0x97, 0x6a, 0xae, 0x19, 0x73, 0x05, 0x24, 0xf5,
	0x05, 0xb0, 0xa2, 0xde, 0xb6, 0x6b, 0xc6, 0xfa, 0x19, 0x3e, 0x88, 0x41, 0x32, 0x2e, 0x43, 0x53,
	0xd0, 0x0b, 0x04, 0xe5, 0x11, 0x98, 0xf4, 0xfd, 0x4a, 0xae, 0x42, 0x06, 0xa5, 0xd8, 0xbf, 0x9d,
	0x2f, 0x6d, 0xb4, 0x58, 0xda, 0xe8, 0x73, 0x69, 0xa3, 0xd7, 0x95, 0x6d, 0x2d, 0x56, 0xb6, 0xf5,
	0xbe, 0xb2, 0xad, 0xa7, 0xf3, 0x90, 0xeb, 0xd1, 0xc4, 0x77, 0x02, 0x15, 0x91, 0x8b, 0xc7, 0x87,
	0xe1, 0x35, 0xe8, 0x4c, 0x25, 0x63, 0x12, 0x8c, 0x28, 0x97, 0xe4, 0xf9, 0xb7, 0xcb, 0xe9, 0x59,
	0x0c, 0xa9, 0xbf, 0x59, 0x5c, 0xec, 0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x20, 0x1c, 0xe3, 0x77,
	0x46, 0x02, 0x00, 0x00,
}

func (m *EventUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.NewParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.OldParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EventToggleMultiCoinRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventToggleMultiCoinRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventToggleMultiCoinRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingRewardsClaimed) > 0 {
		i -= len(m.PendingRewardsClaimed)
		copy(dAtA[i:], m.PendingRewardsClaimed)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.PendingRewardsClaimed)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OldParams.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.NewParams.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventToggleMultiCoinRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	l = len(m.PendingRewardsClaimed)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OldParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventToggleMultiCoinRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventToggleMultiCoinRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventToggleMultiCoinRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRewardsClaimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingRewardsClaimed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
