// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/query/v1beta1/query.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types1 "github.com/KYVENetwork/chain/x/pool/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types2 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BasicPool contains the necessary properties need for a pool
// to be displayed in the UI
type BasicPool struct {
	// id is the ID of the pool
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name of the pool
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// runtime for the protocol nodes
	// like evm, bitcoin, etc.
	Runtime string `protobuf:"bytes,3,opt,name=runtime,proto3" json:"runtime,omitempty"`
	// logo of the pool
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// inflation_share_weight is the base payout for each bundle reward
	InflationShareWeight cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=inflation_share_weight,json=inflationShareWeight,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"inflation_share_weight"`
	// upload_interval is the interval bundles get created
	UploadInterval uint64 `protobuf:"varint,6,opt,name=upload_interval,json=uploadInterval,proto3" json:"upload_interval,omitempty"`
	// total_funds of the pool. If the pool runs
	// out of funds no more bundles will be produced
	TotalFunds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=total_funds,json=totalFunds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_funds"`
	// total_stake of the pool
	TotalStake uint64 `protobuf:"varint,8,opt,name=total_stake,json=totalStake,proto3" json:"total_stake,omitempty"`
	// status of the pool if pool is able
	// to produce bundles, etc.
	Status types1.PoolStatus `protobuf:"varint,9,opt,name=status,proto3,enum=kyve.pool.v1beta1.PoolStatus" json:"status,omitempty"`
}

func (m *BasicPool) Reset()         { *m = BasicPool{} }
func (m *BasicPool) String() string { return proto.CompactTextString(m) }
func (*BasicPool) ProtoMessage()    {}
func (*BasicPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{0}
}
func (m *BasicPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicPool.Merge(m, src)
}
func (m *BasicPool) XXX_Size() int {
	return m.Size()
}
func (m *BasicPool) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicPool.DiscardUnknown(m)
}

var xxx_messageInfo_BasicPool proto.InternalMessageInfo

func (m *BasicPool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BasicPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BasicPool) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *BasicPool) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *BasicPool) GetUploadInterval() uint64 {
	if m != nil {
		return m.UploadInterval
	}
	return 0
}

func (m *BasicPool) GetTotalFunds() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalFunds
	}
	return nil
}

func (m *BasicPool) GetTotalStake() uint64 {
	if m != nil {
		return m.TotalStake
	}
	return 0
}

func (m *BasicPool) GetStatus() types1.PoolStatus {
	if m != nil {
		return m.Status
	}
	return types1.POOL_STATUS_UNSPECIFIED
}

// FullStaker aggregates information from the staker and its delegators
// as well as pending queue entries into one object.
// It contains almost all needed information for a convenient usage
type FullStaker struct {
	// address of the staker
	Address   string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Validator *types2.Validator `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	// validator_delegators returns the amount of delegators which have delegated
	// into this validator
	ValidatorDelegators uint64 `protobuf:"varint,3,opt,name=validator_delegators,json=validatorDelegators,proto3" json:"validator_delegators,omitempty"`
	// validator_self_delegation returns the amount in $KYVE the validator has
	// personally delegated
	ValidatorSelfDelegation uint64 `protobuf:"varint,4,opt,name=validator_self_delegation,json=validatorSelfDelegation,proto3" json:"validator_self_delegation,omitempty"`
	// validator_unbonding returns the amount in $KYVE the validator is currently
	// unbonding from his validator
	ValidatorUnbonding uint64 `protobuf:"varint,5,opt,name=validator_unbonding,json=validatorUnbonding,proto3" json:"validator_unbonding,omitempty"`
	// validator_total_pool_stake returns the amount the validator has in total
	// staked in all his pools
	ValidatorTotalPoolStake    uint64                                   `protobuf:"varint,6,opt,name=validator_total_pool_stake,json=validatorTotalPoolStake,proto3" json:"validator_total_pool_stake,omitempty"`
	ValidatorCommissionRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=validator_commission_rewards,json=validatorCommissionRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"validator_commission_rewards"`
	// pools is a list of all pools the staker is currently
	// participating, i.e. allowed to vote and upload data.
	Pools []*PoolMembership `protobuf:"bytes,8,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *FullStaker) Reset()         { *m = FullStaker{} }
func (m *FullStaker) String() string { return proto.CompactTextString(m) }
func (*FullStaker) ProtoMessage()    {}
func (*FullStaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{1}
}
func (m *FullStaker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullStaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullStaker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullStaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullStaker.Merge(m, src)
}
func (m *FullStaker) XXX_Size() int {
	return m.Size()
}
func (m *FullStaker) XXX_DiscardUnknown() {
	xxx_messageInfo_FullStaker.DiscardUnknown(m)
}

var xxx_messageInfo_FullStaker proto.InternalMessageInfo

func (m *FullStaker) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *FullStaker) GetValidator() *types2.Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *FullStaker) GetValidatorDelegators() uint64 {
	if m != nil {
		return m.ValidatorDelegators
	}
	return 0
}

func (m *FullStaker) GetValidatorSelfDelegation() uint64 {
	if m != nil {
		return m.ValidatorSelfDelegation
	}
	return 0
}

func (m *FullStaker) GetValidatorUnbonding() uint64 {
	if m != nil {
		return m.ValidatorUnbonding
	}
	return 0
}

func (m *FullStaker) GetValidatorTotalPoolStake() uint64 {
	if m != nil {
		return m.ValidatorTotalPoolStake
	}
	return 0
}

func (m *FullStaker) GetValidatorCommissionRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ValidatorCommissionRewards
	}
	return nil
}

func (m *FullStaker) GetPools() []*PoolMembership {
	if m != nil {
		return m.Pools
	}
	return nil
}

// CommissionChangeEntry shows when the old commission
// of a staker will change to the new commission
type CommissionChangeEntry struct {
	// commission is the new commission that will
	// become active once the change-time is over
	Commission cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=commission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission"`
	// creation_date is the UNIX-timestamp (in seconds)
	// of when the entry was created.
	CreationDate int64 `protobuf:"varint,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (m *CommissionChangeEntry) Reset()         { *m = CommissionChangeEntry{} }
func (m *CommissionChangeEntry) String() string { return proto.CompactTextString(m) }
func (*CommissionChangeEntry) ProtoMessage()    {}
func (*CommissionChangeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{2}
}
func (m *CommissionChangeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommissionChangeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommissionChangeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommissionChangeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommissionChangeEntry.Merge(m, src)
}
func (m *CommissionChangeEntry) XXX_Size() int {
	return m.Size()
}
func (m *CommissionChangeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_CommissionChangeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_CommissionChangeEntry proto.InternalMessageInfo

func (m *CommissionChangeEntry) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

// StakeFractionChangeEntry shows when the old stake fraction
// of a staker will change to the new stake fraction
type StakeFractionChangeEntry struct {
	// stake_fraction is the new stake_fraction that will
	// become active once the change-time is over
	StakeFraction cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=stake_fraction,json=stakeFraction,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"stake_fraction"`
	// creation_date is the UNIX-timestamp (in seconds)
	// of when the entry was created.
	CreationDate int64 `protobuf:"varint,2,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
}

func (m *StakeFractionChangeEntry) Reset()         { *m = StakeFractionChangeEntry{} }
func (m *StakeFractionChangeEntry) String() string { return proto.CompactTextString(m) }
func (*StakeFractionChangeEntry) ProtoMessage()    {}
func (*StakeFractionChangeEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{3}
}
func (m *StakeFractionChangeEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeFractionChangeEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeFractionChangeEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeFractionChangeEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeFractionChangeEntry.Merge(m, src)
}
func (m *StakeFractionChangeEntry) XXX_Size() int {
	return m.Size()
}
func (m *StakeFractionChangeEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeFractionChangeEntry.DiscardUnknown(m)
}

var xxx_messageInfo_StakeFractionChangeEntry proto.InternalMessageInfo

func (m *StakeFractionChangeEntry) GetCreationDate() int64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

// PoolMembership shows in which pool the staker
// is participating
type PoolMembership struct {
	// pool contains useful information about the pool
	Pool *BasicPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// points indicates if the staker is inactive
	// If the staker misses a vote, a point is added.
	// After 5 points the staker is removed from
	// the stakers set.
	Points uint64 `protobuf:"varint,2,opt,name=points,proto3" json:"points,omitempty"`
	// is_leaving indicates if a user has scheduled a
	// a PoolLeave entry. After the leave-time is over
	// the staker will no longer participate in that pool
	IsLeaving bool `protobuf:"varint,3,opt,name=is_leaving,json=isLeaving,proto3" json:"is_leaving,omitempty"`
	// pool address is the address which is authorized to vote
	// and submit bundles. If the server gets compromised
	// the staker can just change the pool address .
	PoolAddress string `protobuf:"bytes,4,opt,name=pool_address,json=poolAddress,proto3" json:"pool_address,omitempty"`
	// balance is the pool address  account balance and indicates
	// whether or not the pool account needs additional funds to
	// pay for gas fees
	Balance uint64 `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`
	// commission is the commission the validator has chosen for
	// this specific pool
	Commission cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=commission,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission"`
	// pending_commission_change shows if the staker plans
	// to change its commission. Delegators will see a warning in
	// the UI. A Commission change takes some time until
	// the commission is applied. Users have time to redelegate
	// if they not agree with the new commission.
	PendingCommissionChange *CommissionChangeEntry `protobuf:"bytes,7,opt,name=pending_commission_change,json=pendingCommissionChange,proto3" json:"pending_commission_change,omitempty"`
	// stake fraction is a percentage the validator has chosen for
	// this pool. It is the fraction of how much of his total stake
	// the validator wants to stake in this specific pool
	StakeFraction cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=stake_fraction,json=stakeFraction,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"stake_fraction"`
	// pending_stake_fraction_change shows if the staker plans
	// to change its stake fraction. Delegators will see a warning in
	// the UI. A stake fraction change takes some time until
	// the stake fraction is applied. Users have time to redelegate
	// if they not agree with the new stake fraction.
	PendingStakeFractionChange *StakeFractionChangeEntry `protobuf:"bytes,9,opt,name=pending_stake_fraction_change,json=pendingStakeFractionChange,proto3" json:"pending_stake_fraction_change,omitempty"`
	// pool stake shows the actual amount the validator has staked
	// in this pool. It can be lower than the specified stake fraction
	// because of the max voting power limit
	PoolStake uint64 `protobuf:"varint,10,opt,name=pool_stake,json=poolStake,proto3" json:"pool_stake,omitempty"`
}

func (m *PoolMembership) Reset()         { *m = PoolMembership{} }
func (m *PoolMembership) String() string { return proto.CompactTextString(m) }
func (*PoolMembership) ProtoMessage()    {}
func (*PoolMembership) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b41255feae93a15, []int{4}
}
func (m *PoolMembership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMembership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMembership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMembership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMembership.Merge(m, src)
}
func (m *PoolMembership) XXX_Size() int {
	return m.Size()
}
func (m *PoolMembership) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMembership.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMembership proto.InternalMessageInfo

func (m *PoolMembership) GetPool() *BasicPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *PoolMembership) GetPoints() uint64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *PoolMembership) GetIsLeaving() bool {
	if m != nil {
		return m.IsLeaving
	}
	return false
}

func (m *PoolMembership) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *PoolMembership) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *PoolMembership) GetPendingCommissionChange() *CommissionChangeEntry {
	if m != nil {
		return m.PendingCommissionChange
	}
	return nil
}

func (m *PoolMembership) GetPendingStakeFractionChange() *StakeFractionChangeEntry {
	if m != nil {
		return m.PendingStakeFractionChange
	}
	return nil
}

func (m *PoolMembership) GetPoolStake() uint64 {
	if m != nil {
		return m.PoolStake
	}
	return 0
}

func init() {
	proto.RegisterType((*BasicPool)(nil), "kyve.query.v1beta1.BasicPool")
	proto.RegisterType((*FullStaker)(nil), "kyve.query.v1beta1.FullStaker")
	proto.RegisterType((*CommissionChangeEntry)(nil), "kyve.query.v1beta1.CommissionChangeEntry")
	proto.RegisterType((*StakeFractionChangeEntry)(nil), "kyve.query.v1beta1.StakeFractionChangeEntry")
	proto.RegisterType((*PoolMembership)(nil), "kyve.query.v1beta1.PoolMembership")
}

func init() { proto.RegisterFile("kyve/query/v1beta1/query.proto", fileDescriptor_6b41255feae93a15) }

var fileDescriptor_6b41255feae93a15 = []byte{
	// 920 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x26, 0x5b, 0x27, 0x7e, 0x6e, 0x8d, 0x18, 0x42, 0xbb, 0x09, 0x8d, 0x93, 0xba, 0x48,
	0x98, 0x0a, 0x76, 0x95, 0xa0, 0x4a, 0x08, 0x0e, 0x88, 0xc4, 0x8d, 0x04, 0x14, 0x84, 0x36, 0x50,
	0x54, 0x2e, 0xd6, 0x78, 0x77, 0xbc, 0x1e, 0x79, 0x77, 0xc6, 0xdd, 0x19, 0x3b, 0xf8, 0xc8, 0x99,
	0x0b, 0x82, 0x2f, 0x81, 0x10, 0x07, 0xbe, 0x01, 0xd7, 0x1e, 0x7b, 0x44, 0x1c, 0x0a, 0x4a, 0x0e,
	0x7c, 0x0d, 0x34, 0xff, 0xd6, 0x4e, 0x30, 0x52, 0xa9, 0xd4, 0x8b, 0x3d, 0xef, 0xff, 0x9b, 0xf7,
	0xfb, 0xbd, 0xb1, 0xa1, 0x35, 0x9a, 0x4d, 0x49, 0xf4, 0x68, 0x42, 0xca, 0x59, 0x34, 0xdd, 0xef,
	0x13, 0x89, 0xf7, 0x8d, 0x14, 0x8e, 0x4b, 0x2e, 0x39, 0x42, 0xca, 0x1e, 0x1a, 0x8d, 0xb5, 0x6f,
	0xbf, 0x8c, 0x0b, 0xca, 0x78, 0xa4, 0x3f, 0x8d, 0xdb, 0x76, 0x2b, 0xe1, 0xa2, 0xe0, 0x22, 0xea,
	0x63, 0x41, 0xaa, 0x3c, 0x09, 0xa7, 0xcc, 0xda, 0x5f, 0xb7, 0x76, 0x21, 0xf1, 0x88, 0xb2, 0xac,
	0x72, 0xb1, 0xb2, 0xf5, 0xda, 0xcc, 0x78, 0xc6, 0xf5, 0x31, 0x52, 0x27, 0xab, 0xbd, 0xa9, 0x5b,
	0x1c, 0x73, 0x9e, 0x57, 0x61, 0x4a, 0x30, 0xd6, 0xf6, 0x2f, 0x6b, 0x50, 0x3f, 0xc4, 0x82, 0x26,
	0x9f, 0x73, 0x9e, 0xa3, 0x26, 0xac, 0xd2, 0x34, 0xf0, 0xf6, 0xbc, 0x8e, 0x1f, 0xaf, 0xd2, 0x14,
	0x21, 0xf0, 0x19, 0x2e, 0x48, 0xb0, 0xba, 0xe7, 0x75, 0xea, 0xb1, 0x3e, 0xa3, 0x00, 0xd6, 0xcb,
	0x09, 0x93, 0xb4, 0x20, 0xc1, 0x9a, 0x56, 0x3b, 0x51, 0x79, 0xe7, 0x3c, 0xe3, 0x81, 0x6f, 0xbc,
	0xd5, 0x19, 0x3d, 0x84, 0xeb, 0x94, 0x0d, 0x72, 0x2c, 0x29, 0x67, 0x3d, 0x31, 0xc4, 0x25, 0xe9,
	0x9d, 0x12, 0x9a, 0x0d, 0x65, 0x70, 0x45, 0x79, 0x1d, 0xde, 0x7e, 0xfc, 0x74, 0x77, 0xe5, 0x8f,
	0xa7, 0xbb, 0xaf, 0x99, 0x1b, 0x8a, 0x74, 0x14, 0x52, 0x1e, 0x15, 0x58, 0x0e, 0xc3, 0xfb, 0x24,
	0xc3, 0xc9, 0xac, 0x4b, 0x92, 0x78, 0xb3, 0x4a, 0x71, 0xa2, 0x32, 0x7c, 0xa5, 0x13, 0xa0, 0x37,
	0xe0, 0xa5, 0xc9, 0x38, 0xe7, 0x38, 0xed, 0x51, 0x26, 0x49, 0x39, 0xc5, 0x79, 0x50, 0xd3, 0x9d,
	0x37, 0x8d, 0xfa, 0x23, 0xab, 0x45, 0x8f, 0xa0, 0x21, 0xb9, 0xc4, 0x79, 0x6f, 0x30, 0x61, 0xa9,
	0x08, 0xd6, 0xf7, 0xd6, 0x3a, 0x8d, 0x83, 0xad, 0xd0, 0x54, 0x0c, 0xd5, 0xcc, 0x1d, 0x36, 0xe1,
	0x11, 0xa7, 0xec, 0xf0, 0xae, 0xea, 0xe9, 0xe7, 0x3f, 0x77, 0x3b, 0x19, 0x95, 0xc3, 0x49, 0x3f,
	0x4c, 0x78, 0x11, 0x59, 0x00, 0xcc, 0xd7, 0xdb, 0x22, 0x1d, 0x45, 0x72, 0x36, 0x26, 0x42, 0x07,
	0x88, 0x9f, 0xfe, 0xfe, 0xf5, 0x8e, 0x17, 0x83, 0x2e, 0x72, 0xac, 0x6a, 0xa0, 0x5d, 0x57, 0x52,
	0x21, 0x44, 0x82, 0x0d, 0xdd, 0x97, 0x71, 0x38, 0x51, 0x1a, 0x74, 0x17, 0x6a, 0x42, 0x62, 0x39,
	0x11, 0x41, 0x7d, 0xcf, 0xeb, 0x34, 0x0f, 0x76, 0x42, 0xcd, 0x14, 0x8d, 0x8c, 0x6b, 0x46, 0x41,
	0x72, 0xa2, 0x9d, 0x62, 0xeb, 0xdc, 0xfe, 0xd1, 0x07, 0x38, 0x9e, 0xe4, 0x26, 0x49, 0xa9, 0xb0,
	0xc0, 0x69, 0x5a, 0x12, 0x21, 0x34, 0x68, 0xf5, 0xd8, 0x89, 0xe8, 0x03, 0xa8, 0x4f, 0x71, 0x4e,
	0x53, 0x2c, 0x79, 0xa9, 0xe1, 0x6b, 0x1c, 0xdc, 0x72, 0x37, 0x76, 0xac, 0x71, 0x75, 0x1e, 0x38,
	0xc7, 0x78, 0x1e, 0x83, 0xf6, 0x61, 0xb3, 0x12, 0x7a, 0x29, 0xc9, 0x49, 0xa6, 0x4e, 0x42, 0x63,
	0xee, 0xc7, 0xaf, 0x54, 0xb6, 0x6e, 0x65, 0x42, 0xef, 0xc1, 0xd6, 0x3c, 0x44, 0x90, 0x7c, 0xe0,
	0xe2, 0x28, 0x67, 0x9a, 0x14, 0x7e, 0x7c, 0xa3, 0x72, 0x38, 0x21, 0xf9, 0xa0, 0x5b, 0x99, 0x51,
	0x04, 0xf3, 0x94, 0xbd, 0x09, 0xeb, 0x73, 0x96, 0x52, 0x96, 0x69, 0x92, 0xf8, 0x31, 0xaa, 0x4c,
	0x5f, 0x3a, 0x0b, 0x7a, 0x1f, 0xb6, 0xe7, 0x01, 0x66, 0xd6, 0x6a, 0x78, 0x76, 0xe0, 0xb5, 0x4b,
	0xd5, 0xbe, 0x50, 0x0e, 0x76, 0x9e, 0x23, 0x82, 0x7e, 0xf0, 0xe0, 0xe6, 0x3c, 0x3a, 0xe1, 0x45,
	0x41, 0x85, 0x50, 0x0c, 0x2d, 0xc9, 0x29, 0x2e, 0x5f, 0x20, 0x47, 0xe6, 0x3d, 0x1f, 0x55, 0x45,
	0x63, 0x53, 0x13, 0xbd, 0x0b, 0x57, 0xd4, 0x0d, 0x44, 0xb0, 0xa1, 0x8b, 0xb7, 0xc3, 0x7f, 0xbf,
	0x1d, 0x9a, 0x12, 0x9f, 0x92, 0xa2, 0x4f, 0x4a, 0x31, 0xa4, 0xe3, 0xd8, 0x04, 0xb4, 0xbf, 0xf5,
	0xe0, 0xd5, 0x79, 0xbe, 0xa3, 0x21, 0x66, 0x19, 0xb9, 0xc7, 0x64, 0x39, 0x43, 0x47, 0x00, 0xf3,
	0xdb, 0x19, 0x8e, 0x3c, 0xdb, 0xca, 0x2d, 0x84, 0xa1, 0xdb, 0x70, 0x2d, 0x29, 0x89, 0x59, 0xe1,
	0x14, 0x4b, 0xf3, 0x1c, 0xac, 0xc5, 0x57, 0x9d, 0xb2, 0x8b, 0x25, 0x69, 0x7f, 0xe7, 0x41, 0xa0,
	0x87, 0x7b, 0x5c, 0xe2, 0x44, 0x5e, 0x6a, 0xe3, 0x63, 0x68, 0x6a, 0x5c, 0x7a, 0x03, 0x6b, 0xfc,
	0x3f, 0xad, 0x5c, 0x13, 0x8b, 0x69, 0x9f, 0xad, 0x9b, 0xdf, 0x7c, 0x68, 0x5e, 0x9c, 0x15, 0xda,
	0x07, 0x5f, 0x4d, 0x4b, 0x57, 0x6e, 0xb8, 0x7d, 0xbb, 0x38, 0xdd, 0xea, 0x21, 0x8c, 0xb5, 0x2b,
	0xba, 0x0e, 0xb5, 0x31, 0xa7, 0x4c, 0x0a, 0x5d, 0xc3, 0x8f, 0xad, 0x84, 0x76, 0x00, 0xa8, 0xe8,
	0xe5, 0x04, 0x4f, 0x15, 0x47, 0xd5, 0x46, 0x6c, 0xc4, 0x75, 0x2a, 0xee, 0x1b, 0x05, 0xba, 0x05,
	0x57, 0x35, 0x15, 0xdd, 0x6a, 0x9a, 0xf7, 0xb0, 0xa1, 0x74, 0x1f, 0xda, 0xf5, 0x0c, 0x60, 0xbd,
	0x8f, 0x73, 0xcc, 0x12, 0x62, 0x29, 0xee, 0xc4, 0x4b, 0x88, 0xd5, 0x9e, 0x0f, 0x31, 0x02, 0x5b,
	0x63, 0xa2, 0xf7, 0x64, 0x91, 0xdc, 0x89, 0x46, 0x24, 0x58, 0xd7, 0x03, 0x78, 0x73, 0xd9, 0x00,
	0x96, 0x92, 0x28, 0xbe, 0x61, 0x73, 0x5d, 0xb6, 0x2e, 0x81, 0x75, 0xe3, 0xb9, 0x61, 0xe5, 0xb0,
	0xe3, 0x5a, 0xbe, 0x98, 0xd3, 0xb5, 0x5d, 0xd7, 0x6d, 0xbf, 0xb5, 0xac, 0xed, 0xff, 0xe2, 0x5d,
	0xbc, 0x6d, 0x53, 0x2e, 0x71, 0x50, 0x20, 0x2e, 0x3c, 0x18, 0xa0, 0x51, 0xa8, 0x8f, 0xdd, 0x13,
	0x71, 0xd8, 0x7d, 0x7c, 0xd6, 0xf2, 0x9e, 0x9c, 0xb5, 0xbc, 0xbf, 0xce, 0x5a, 0xde, 0xf7, 0xe7,
	0xad, 0x95, 0x27, 0xe7, 0xad, 0x95, 0xdf, 0xcf, 0x5b, 0x2b, 0x5f, 0xdf, 0x59, 0x58, 0xf9, 0x4f,
	0x1e, 0x3e, 0xb8, 0xf7, 0x19, 0x91, 0xa7, 0xbc, 0x1c, 0x45, 0xc9, 0x10, 0x53, 0x16, 0x7d, 0x63,
	0xff, 0x0d, 0xe8, 0xd5, 0xef, 0xd7, 0xf4, 0xaf, 0xec, 0x3b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xa9, 0xae, 0xc2, 0xd0, 0x28, 0x08, 0x00, 0x00,
}

func (m *BasicPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.TotalStake != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalStake))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TotalFunds) > 0 {
		for iNdEx := len(m.TotalFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.UploadInterval != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UploadInterval))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.InflationShareWeight.Size()
		i -= size
		if _, err := m.InflationShareWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Runtime) > 0 {
		i -= len(m.Runtime)
		copy(dAtA[i:], m.Runtime)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Runtime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FullStaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullStaker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullStaker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ValidatorCommissionRewards) > 0 {
		for iNdEx := len(m.ValidatorCommissionRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValidatorCommissionRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ValidatorTotalPoolStake != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorTotalPoolStake))
		i--
		dAtA[i] = 0x30
	}
	if m.ValidatorUnbonding != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorUnbonding))
		i--
		dAtA[i] = 0x28
	}
	if m.ValidatorSelfDelegation != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorSelfDelegation))
		i--
		dAtA[i] = 0x20
	}
	if m.ValidatorDelegators != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorDelegators))
		i--
		dAtA[i] = 0x18
	}
	if m.Validator != nil {
		{
			size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommissionChangeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommissionChangeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommissionChangeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationDate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CreationDate))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Commission.Size()
		i -= size
		if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *StakeFractionChangeEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeFractionChangeEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeFractionChangeEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationDate != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CreationDate))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.StakeFraction.Size()
		i -= size
		if _, err := m.StakeFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PoolMembership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMembership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMembership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolStake != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolStake))
		i--
		dAtA[i] = 0x50
	}
	if m.PendingStakeFractionChange != nil {
		{
			size, err := m.PendingStakeFractionChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.StakeFraction.Size()
		i -= size
		if _, err := m.StakeFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.PendingCommissionChange != nil {
		{
			size, err := m.PendingCommissionChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.Commission.Size()
		i -= size
		if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Balance != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x28
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsLeaving {
		i--
		if m.IsLeaving {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Points != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Points))
		i--
		dAtA[i] = 0x10
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BasicPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Runtime)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.InflationShareWeight.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.UploadInterval != 0 {
		n += 1 + sovQuery(uint64(m.UploadInterval))
	}
	if len(m.TotalFunds) > 0 {
		for _, e := range m.TotalFunds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.TotalStake != 0 {
		n += 1 + sovQuery(uint64(m.TotalStake))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *FullStaker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Validator != nil {
		l = m.Validator.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ValidatorDelegators != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorDelegators))
	}
	if m.ValidatorSelfDelegation != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorSelfDelegation))
	}
	if m.ValidatorUnbonding != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorUnbonding))
	}
	if m.ValidatorTotalPoolStake != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorTotalPoolStake))
	}
	if len(m.ValidatorCommissionRewards) > 0 {
		for _, e := range m.ValidatorCommissionRewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *CommissionChangeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Commission.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.CreationDate != 0 {
		n += 1 + sovQuery(uint64(m.CreationDate))
	}
	return n
}

func (m *StakeFractionChangeEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakeFraction.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.CreationDate != 0 {
		n += 1 + sovQuery(uint64(m.CreationDate))
	}
	return n
}

func (m *PoolMembership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Points != 0 {
		n += 1 + sovQuery(uint64(m.Points))
	}
	if m.IsLeaving {
		n += 2
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovQuery(uint64(m.Balance))
	}
	l = m.Commission.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.PendingCommissionChange != nil {
		l = m.PendingCommissionChange.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.StakeFraction.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.PendingStakeFractionChange != nil {
		l = m.PendingStakeFractionChange.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolStake != 0 {
		n += 1 + sovQuery(uint64(m.PoolStake))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BasicPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationShareWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflationShareWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadInterval", wireType)
			}
			m.UploadInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalFunds = append(m.TotalFunds, types.Coin{})
			if err := m.TotalFunds[len(m.TotalFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStake", wireType)
			}
			m.TotalStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.PoolStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullStaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullStaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullStaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validator == nil {
				m.Validator = &types2.Validator{}
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorDelegators", wireType)
			}
			m.ValidatorDelegators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorDelegators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSelfDelegation", wireType)
			}
			m.ValidatorSelfDelegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSelfDelegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorUnbonding", wireType)
			}
			m.ValidatorUnbonding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorUnbonding |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorTotalPoolStake", wireType)
			}
			m.ValidatorTotalPoolStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorTotalPoolStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCommissionRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorCommissionRewards = append(m.ValidatorCommissionRewards, types.Coin{})
			if err := m.ValidatorCommissionRewards[len(m.ValidatorCommissionRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &PoolMembership{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommissionChangeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommissionChangeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommissionChangeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			m.CreationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeFractionChangeEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeFractionChangeEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeFractionChangeEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			m.CreationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMembership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolMembership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolMembership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &BasicPool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			m.Points = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Points |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeaving", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeaving = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingCommissionChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingCommissionChange == nil {
				m.PendingCommissionChange = &CommissionChangeEntry{}
			}
			if err := m.PendingCommissionChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakeFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakeFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingStakeFractionChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PendingStakeFractionChange == nil {
				m.PendingStakeFractionChange = &StakeFractionChangeEntry{}
			}
			if err := m.PendingStakeFractionChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolStake", wireType)
			}
			m.PoolStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
