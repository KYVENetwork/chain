// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/query/v1beta1/account.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryAccountAssetsRequest is the request type for the Query/AccountAssets RPC method.
type QueryAccountAssetsRequest struct {
	// address ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAccountAssetsRequest) Reset()         { *m = QueryAccountAssetsRequest{} }
func (m *QueryAccountAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountAssetsRequest) ProtoMessage()    {}
func (*QueryAccountAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{0}
}
func (m *QueryAccountAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountAssetsRequest.Merge(m, src)
}
func (m *QueryAccountAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountAssetsRequest proto.InternalMessageInfo

func (m *QueryAccountAssetsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
type QueryAccountAssetsResponse struct {
	// balance ...
	Balance uint64 `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	// delegation is the amount in $KYVE this account has in total delegated ...
	Delegation uint64 `protobuf:"varint,2,opt,name=delegation,proto3" json:"delegation,omitempty"`
	// delegation_unbonding is the amount in $KYVE this account has in total currently unbonding ...
	DelegationUnbonding uint64 `protobuf:"varint,3,opt,name=delegation_unbonding,json=delegationUnbonding,proto3" json:"delegation_unbonding,omitempty"`
	// delegation_rewards are the current unclaimed delegation rewards
	DelegationRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=delegation_rewards,json=delegationRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"delegation_rewards"`
	// commission_rewards are the current unclaimed commission rewards
	CommissionRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=commission_rewards,json=commissionRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"commission_rewards"`
	// protocol_funding ...
	ProtocolFunding github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=protocol_funding,json=protocolFunding,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"protocol_funding"`
}

func (m *QueryAccountAssetsResponse) Reset()         { *m = QueryAccountAssetsResponse{} }
func (m *QueryAccountAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountAssetsResponse) ProtoMessage()    {}
func (*QueryAccountAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{1}
}
func (m *QueryAccountAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountAssetsResponse.Merge(m, src)
}
func (m *QueryAccountAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountAssetsResponse proto.InternalMessageInfo

func (m *QueryAccountAssetsResponse) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *QueryAccountAssetsResponse) GetDelegation() uint64 {
	if m != nil {
		return m.Delegation
	}
	return 0
}

func (m *QueryAccountAssetsResponse) GetDelegationUnbonding() uint64 {
	if m != nil {
		return m.DelegationUnbonding
	}
	return 0
}

func (m *QueryAccountAssetsResponse) GetDelegationRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.DelegationRewards
	}
	return nil
}

func (m *QueryAccountAssetsResponse) GetCommissionRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CommissionRewards
	}
	return nil
}

func (m *QueryAccountAssetsResponse) GetProtocolFunding() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.ProtocolFunding
	}
	return nil
}

// QueryAccountFundedListRequest ...
type QueryAccountDelegationUnbondingsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// address ...
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAccountDelegationUnbondingsRequest) Reset() {
	*m = QueryAccountDelegationUnbondingsRequest{}
}
func (m *QueryAccountDelegationUnbondingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountDelegationUnbondingsRequest) ProtoMessage()    {}
func (*QueryAccountDelegationUnbondingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{2}
}
func (m *QueryAccountDelegationUnbondingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountDelegationUnbondingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountDelegationUnbondingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountDelegationUnbondingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountDelegationUnbondingsRequest.Merge(m, src)
}
func (m *QueryAccountDelegationUnbondingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountDelegationUnbondingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountDelegationUnbondingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountDelegationUnbondingsRequest proto.InternalMessageInfo

func (m *QueryAccountDelegationUnbondingsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryAccountDelegationUnbondingsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
type QueryAccountDelegationUnbondingsResponse struct {
	// balance ...
	Unbondings []DelegationUnbonding `protobuf:"bytes,1,rep,name=unbondings,proto3" json:"unbondings"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAccountDelegationUnbondingsResponse) Reset() {
	*m = QueryAccountDelegationUnbondingsResponse{}
}
func (m *QueryAccountDelegationUnbondingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountDelegationUnbondingsResponse) ProtoMessage()    {}
func (*QueryAccountDelegationUnbondingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{3}
}
func (m *QueryAccountDelegationUnbondingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountDelegationUnbondingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountDelegationUnbondingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountDelegationUnbondingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountDelegationUnbondingsResponse.Merge(m, src)
}
func (m *QueryAccountDelegationUnbondingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountDelegationUnbondingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountDelegationUnbondingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountDelegationUnbondingsResponse proto.InternalMessageInfo

func (m *QueryAccountDelegationUnbondingsResponse) GetUnbondings() []DelegationUnbonding {
	if m != nil {
		return m.Unbondings
	}
	return nil
}

func (m *QueryAccountDelegationUnbondingsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAccountAssetsResponse is the response type for the Query/AccountAssets RPC method.
type DelegationUnbonding struct {
	// amount
	Amount uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// creation_time
	CreationTime uint64 `protobuf:"varint,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// staker
	Staker *FullStaker `protobuf:"bytes,3,opt,name=staker,proto3" json:"staker,omitempty"`
}

func (m *DelegationUnbonding) Reset()         { *m = DelegationUnbonding{} }
func (m *DelegationUnbonding) String() string { return proto.CompactTextString(m) }
func (*DelegationUnbonding) ProtoMessage()    {}
func (*DelegationUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{4}
}
func (m *DelegationUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationUnbonding.Merge(m, src)
}
func (m *DelegationUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *DelegationUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationUnbonding proto.InternalMessageInfo

func (m *DelegationUnbonding) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *DelegationUnbonding) GetCreationTime() uint64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *DelegationUnbonding) GetStaker() *FullStaker {
	if m != nil {
		return m.Staker
	}
	return nil
}

// QueryAccountFundedListRequest is the request type for the account queries with pagination
type QueryAccountFundedListRequest struct {
	// address ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAccountFundedListRequest) Reset()         { *m = QueryAccountFundedListRequest{} }
func (m *QueryAccountFundedListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountFundedListRequest) ProtoMessage()    {}
func (*QueryAccountFundedListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{5}
}
func (m *QueryAccountFundedListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountFundedListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountFundedListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountFundedListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountFundedListRequest.Merge(m, src)
}
func (m *QueryAccountFundedListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountFundedListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountFundedListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountFundedListRequest proto.InternalMessageInfo

func (m *QueryAccountFundedListRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryAccountFundedListResponse is the response type for the Query/AccountFundedList RPC method.
type QueryAccountFundedListResponse struct {
	// funded ...
	Funded []Funded `protobuf:"bytes,1,rep,name=funded,proto3" json:"funded"`
}

func (m *QueryAccountFundedListResponse) Reset()         { *m = QueryAccountFundedListResponse{} }
func (m *QueryAccountFundedListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountFundedListResponse) ProtoMessage()    {}
func (*QueryAccountFundedListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{6}
}
func (m *QueryAccountFundedListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountFundedListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountFundedListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountFundedListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountFundedListResponse.Merge(m, src)
}
func (m *QueryAccountFundedListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountFundedListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountFundedListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountFundedListResponse proto.InternalMessageInfo

func (m *QueryAccountFundedListResponse) GetFunded() []Funded {
	if m != nil {
		return m.Funded
	}
	return nil
}

// Funded ...
type Funded struct {
	// amounts ...
	Amounts github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amounts,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amounts"`
	// pool ...
	Pool *BasicPool `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *Funded) Reset()         { *m = Funded{} }
func (m *Funded) String() string { return proto.CompactTextString(m) }
func (*Funded) ProtoMessage()    {}
func (*Funded) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{7}
}
func (m *Funded) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funded.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funded.Merge(m, src)
}
func (m *Funded) XXX_Size() int {
	return m.Size()
}
func (m *Funded) XXX_DiscardUnknown() {
	xxx_messageInfo_Funded.DiscardUnknown(m)
}

var xxx_messageInfo_Funded proto.InternalMessageInfo

func (m *Funded) GetAmounts() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *Funded) GetPool() *BasicPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

// QueryAccountDelegationListRequest ...
type QueryAccountRedelegationRequest struct {
	// address ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAccountRedelegationRequest) Reset()         { *m = QueryAccountRedelegationRequest{} }
func (m *QueryAccountRedelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountRedelegationRequest) ProtoMessage()    {}
func (*QueryAccountRedelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{8}
}
func (m *QueryAccountRedelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountRedelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountRedelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountRedelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountRedelegationRequest.Merge(m, src)
}
func (m *QueryAccountRedelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountRedelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountRedelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountRedelegationRequest proto.InternalMessageInfo

func (m *QueryAccountRedelegationRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryAccountDelegationListRequest is the response type for the Query/AccountDelegationList RPC method.
type QueryAccountRedelegationResponse struct {
	// redelegation_cooldown_entries ...
	RedelegationCooldownEntries []RedelegationEntry `protobuf:"bytes,1,rep,name=redelegation_cooldown_entries,json=redelegationCooldownEntries,proto3" json:"redelegation_cooldown_entries"`
	// availableSlots ...
	AvailableSlots uint64 `protobuf:"varint,2,opt,name=available_slots,json=availableSlots,proto3" json:"available_slots,omitempty"`
}

func (m *QueryAccountRedelegationResponse) Reset()         { *m = QueryAccountRedelegationResponse{} }
func (m *QueryAccountRedelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountRedelegationResponse) ProtoMessage()    {}
func (*QueryAccountRedelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{9}
}
func (m *QueryAccountRedelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountRedelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountRedelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountRedelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountRedelegationResponse.Merge(m, src)
}
func (m *QueryAccountRedelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountRedelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountRedelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountRedelegationResponse proto.InternalMessageInfo

func (m *QueryAccountRedelegationResponse) GetRedelegationCooldownEntries() []RedelegationEntry {
	if m != nil {
		return m.RedelegationCooldownEntries
	}
	return nil
}

func (m *QueryAccountRedelegationResponse) GetAvailableSlots() uint64 {
	if m != nil {
		return m.AvailableSlots
	}
	return 0
}

// RedelegationEntry ...
type RedelegationEntry struct {
	// creation_date ...
	CreationDate uint64 `protobuf:"varint,1,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// finish_date ...
	FinishDate uint64 `protobuf:"varint,2,opt,name=finish_date,json=finishDate,proto3" json:"finish_date,omitempty"`
}

func (m *RedelegationEntry) Reset()         { *m = RedelegationEntry{} }
func (m *RedelegationEntry) String() string { return proto.CompactTextString(m) }
func (*RedelegationEntry) ProtoMessage()    {}
func (*RedelegationEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_51ca316755261aec, []int{10}
}
func (m *RedelegationEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedelegationEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedelegationEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedelegationEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedelegationEntry.Merge(m, src)
}
func (m *RedelegationEntry) XXX_Size() int {
	return m.Size()
}
func (m *RedelegationEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_RedelegationEntry.DiscardUnknown(m)
}

var xxx_messageInfo_RedelegationEntry proto.InternalMessageInfo

func (m *RedelegationEntry) GetCreationDate() uint64 {
	if m != nil {
		return m.CreationDate
	}
	return 0
}

func (m *RedelegationEntry) GetFinishDate() uint64 {
	if m != nil {
		return m.FinishDate
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryAccountAssetsRequest)(nil), "kyve.query.v1beta1.QueryAccountAssetsRequest")
	proto.RegisterType((*QueryAccountAssetsResponse)(nil), "kyve.query.v1beta1.QueryAccountAssetsResponse")
	proto.RegisterType((*QueryAccountDelegationUnbondingsRequest)(nil), "kyve.query.v1beta1.QueryAccountDelegationUnbondingsRequest")
	proto.RegisterType((*QueryAccountDelegationUnbondingsResponse)(nil), "kyve.query.v1beta1.QueryAccountDelegationUnbondingsResponse")
	proto.RegisterType((*DelegationUnbonding)(nil), "kyve.query.v1beta1.DelegationUnbonding")
	proto.RegisterType((*QueryAccountFundedListRequest)(nil), "kyve.query.v1beta1.QueryAccountFundedListRequest")
	proto.RegisterType((*QueryAccountFundedListResponse)(nil), "kyve.query.v1beta1.QueryAccountFundedListResponse")
	proto.RegisterType((*Funded)(nil), "kyve.query.v1beta1.Funded")
	proto.RegisterType((*QueryAccountRedelegationRequest)(nil), "kyve.query.v1beta1.QueryAccountRedelegationRequest")
	proto.RegisterType((*QueryAccountRedelegationResponse)(nil), "kyve.query.v1beta1.QueryAccountRedelegationResponse")
	proto.RegisterType((*RedelegationEntry)(nil), "kyve.query.v1beta1.RedelegationEntry")
}

func init() { proto.RegisterFile("kyve/query/v1beta1/account.proto", fileDescriptor_51ca316755261aec) }

var fileDescriptor_51ca316755261aec = []byte{
	// 893 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x3a, 0x91, 0x03, 0x2f, 0x2d, 0x25, 0xd3, 0x0a, 0xb9, 0x86, 0x6c, 0xa2, 0x45, 0x90,
	0x28, 0xa2, 0xbb, 0xb2, 0x4b, 0x11, 0x15, 0xa7, 0xba, 0x49, 0x38, 0xf0, 0x43, 0x65, 0x0b, 0x48,
	0xed, 0xc5, 0x1a, 0xef, 0x4e, 0x36, 0x83, 0x77, 0x67, 0xdc, 0x9d, 0x71, 0x82, 0x55, 0x21, 0x24,
	0x4e, 0x08, 0x2e, 0x48, 0xfc, 0x0b, 0x48, 0x20, 0x4e, 0x5c, 0xb8, 0x71, 0xe2, 0xd4, 0x63, 0x25,
	0x2e, 0x9c, 0x00, 0x25, 0x48, 0x9c, 0xf8, 0x1f, 0xd0, 0xce, 0xcc, 0xda, 0x63, 0xbc, 0xc6, 0xf4,
	0x90, 0x4b, 0xe2, 0x79, 0xf3, 0xbd, 0xf7, 0xbe, 0xf7, 0xde, 0xf7, 0x3c, 0x86, 0xad, 0xfe, 0xe8,
	0x98, 0x04, 0x0f, 0x86, 0x24, 0x1f, 0x05, 0xc7, 0xad, 0x1e, 0x91, 0xb8, 0x15, 0xe0, 0x28, 0xe2,
	0x43, 0x26, 0xfd, 0x41, 0xce, 0x25, 0x47, 0xa8, 0x40, 0xf8, 0x0a, 0xe1, 0x1b, 0x44, 0x73, 0x1d,
	0x67, 0x94, 0xf1, 0x40, 0xfd, 0xd5, 0xb0, 0xe6, 0x6e, 0xc4, 0x45, 0xc6, 0x45, 0xd0, 0xc3, 0xe2,
	0xdf, 0xf1, 0x06, 0x38, 0xa1, 0x0c, 0x4b, 0xca, 0x99, 0xc1, 0xba, 0x36, 0xb6, 0x44, 0x45, 0x9c,
	0x96, 0xf7, 0x57, 0x12, 0x9e, 0x70, 0xf5, 0x31, 0x28, 0x3e, 0x19, 0xeb, 0x0b, 0x09, 0xe7, 0x49,
	0x4a, 0x02, 0x3c, 0xa0, 0x01, 0x66, 0x8c, 0x4b, 0x15, 0x52, 0x94, 0x31, 0x2b, 0x0a, 0xd1, 0xa4,
	0xd5, 0xbd, 0x77, 0x03, 0xae, 0xbe, 0x57, 0x1c, 0x6f, 0xe9, 0xe2, 0x6e, 0x09, 0x41, 0xa4, 0x08,
	0xc9, 0x83, 0x21, 0x11, 0x12, 0x35, 0x60, 0x15, 0xc7, 0x71, 0x4e, 0x84, 0x68, 0x38, 0x5b, 0xce,
	0xce, 0xd3, 0x61, 0x79, 0xf4, 0x3e, 0x5f, 0x81, 0x66, 0x95, 0x9f, 0x18, 0x70, 0x26, 0x48, 0xe1,
	0xd8, 0xc3, 0x29, 0x66, 0x11, 0x51, 0x8e, 0x2b, 0x61, 0x79, 0x44, 0x2e, 0x40, 0x4c, 0x52, 0x92,
	0x28, 0x92, 0x8d, 0x9a, 0xba, 0xb4, 0x2c, 0xa8, 0x05, 0x57, 0x26, 0xa7, 0xee, 0x90, 0xf5, 0x38,
	0x8b, 0x29, 0x4b, 0x1a, 0xcb, 0x0a, 0x79, 0x79, 0x72, 0xf7, 0x41, 0x79, 0x85, 0x3e, 0x05, 0x64,
	0xb9, 0xe4, 0xe4, 0x04, 0xe7, 0xb1, 0x68, 0xd4, 0xb7, 0x96, 0x77, 0xd6, 0xda, 0x57, 0x7d, 0xdd,
	0x53, 0xbf, 0xe8, 0x69, 0x39, 0x27, 0xff, 0x36, 0xa7, 0xac, 0x73, 0xe3, 0xd1, 0x6f, 0x9b, 0x4b,
	0xdf, 0xff, 0xbe, 0xb9, 0x93, 0x50, 0x79, 0x34, 0xec, 0xf9, 0x11, 0xcf, 0x02, 0x33, 0x00, 0xfd,
	0xef, 0x9a, 0x88, 0xfb, 0x81, 0x1c, 0x0d, 0x88, 0x50, 0x0e, 0xe2, 0xbb, 0xbf, 0x7e, 0xd8, 0x75,
	0xc2, 0xf5, 0x49, 0xae, 0x50, 0xa7, 0x2a, 0x08, 0x44, 0x3c, 0xcb, 0xa8, 0x10, 0x36, 0x81, 0xd5,
	0xf3, 0x22, 0x30, 0xc9, 0x55, 0x12, 0x78, 0x08, 0xcf, 0xaa, 0x69, 0x46, 0x3c, 0xed, 0x1e, 0x0e,
	0x75, 0xc3, 0x9e, 0x3a, 0xa7, 0xf4, 0x97, 0xca, 0x4c, 0x07, 0x3a, 0x91, 0xf7, 0xa5, 0x03, 0xdb,
	0xb6, 0x14, 0xf6, 0x66, 0x47, 0x34, 0x16, 0xd4, 0x01, 0xc0, 0x44, 0xf5, 0x4a, 0x1a, 0x6b, 0xed,
	0x97, 0xa7, 0x28, 0x4e, 0x2d, 0x94, 0x7f, 0x07, 0x27, 0xc4, 0xf8, 0x86, 0x96, 0xa7, 0x2d, 0xcc,
	0xda, 0xb4, 0x30, 0x7f, 0x76, 0x60, 0x67, 0x31, 0x1b, 0x23, 0xd3, 0x77, 0x00, 0xc6, 0x0a, 0x2b,
	0x24, 0x5e, 0x74, 0x6c, 0xdb, 0x9f, 0x5d, 0x6c, 0xbf, 0x22, 0x4a, 0x67, 0xa5, 0xe8, 0x5f, 0x68,
	0x05, 0x40, 0x6f, 0x4e, 0x55, 0x57, 0x53, 0xd5, 0x6d, 0x2f, 0xac, 0x4e, 0x73, 0xb1, 0xcb, 0xf3,
	0xbe, 0x70, 0xe0, 0x72, 0x45, 0x4a, 0xf4, 0x1c, 0xd4, 0x71, 0x56, 0x54, 0x65, 0xb6, 0xca, 0x9c,
	0xd0, 0x8b, 0x70, 0x31, 0xca, 0x89, 0xd6, 0xbf, 0xa4, 0x19, 0x31, 0x7b, 0x75, 0xa1, 0x34, 0xbe,
	0x4f, 0x33, 0x82, 0x5e, 0x83, 0xba, 0x90, 0xb8, 0x4f, 0x72, 0xb5, 0x4b, 0x6b, 0x6d, 0xb7, 0xaa,
	0xd0, 0x83, 0x61, 0x9a, 0xde, 0x55, 0xa8, 0xd0, 0xa0, 0xbd, 0x9b, 0xb0, 0x61, 0x37, 0xb4, 0x18,
	0x3b, 0x89, 0xdf, 0xa6, 0x42, 0x2e, 0xfe, 0x96, 0xb8, 0x0f, 0xee, 0x3c, 0x57, 0x33, 0x81, 0xd7,
	0xa1, 0x7e, 0xa8, 0xac, 0xa6, 0xfb, 0xcd, 0x6a, 0x52, 0x05, 0xc2, 0x34, 0xdc, 0xe0, 0xbd, 0x6f,
	0x1d, 0xa8, 0xeb, 0x0b, 0xf4, 0x11, 0xac, 0xea, 0x46, 0x88, 0xc6, 0xf2, 0x39, 0xa9, 0xbe, 0x4c,
	0x80, 0x5a, 0xb0, 0x32, 0xe0, 0x3c, 0x35, 0xd3, 0xdd, 0xa8, 0xa2, 0xdb, 0xc1, 0x82, 0x46, 0x77,
	0x38, 0x4f, 0x43, 0x05, 0xf5, 0xde, 0x80, 0x4d, 0xbb, 0x0b, 0x21, 0xb1, 0xbf, 0x41, 0x16, 0xb5,
	0xf0, 0x27, 0x07, 0xb6, 0xe6, 0x7b, 0x9b, 0x2e, 0x72, 0xd8, 0xc8, 0x2d, 0x7b, 0x37, 0xe2, 0x3c,
	0x8d, 0xf9, 0x09, 0xeb, 0x12, 0x26, 0x73, 0x4a, 0x4a, 0x69, 0xbf, 0x54, 0xc5, 0xd6, 0x0e, 0xb8,
	0xcf, 0x64, 0x3e, 0x32, 0x7d, 0x7e, 0xde, 0x8e, 0x78, 0xdb, 0x04, 0xdc, 0xd7, 0xf1, 0xd0, 0x36,
	0x5c, 0xc2, 0xc7, 0x98, 0xa6, 0xb8, 0x97, 0x92, 0xae, 0x48, 0xb9, 0x14, 0x46, 0x72, 0xcf, 0x8c,
	0xcd, 0x77, 0x0b, 0xab, 0x77, 0x0f, 0xd6, 0x67, 0x12, 0x4c, 0xc9, 0x35, 0xc6, 0xb2, 0x7c, 0x23,
	0xc6, 0x72, 0xdd, 0xc3, 0x92, 0xa0, 0x4d, 0x58, 0x3b, 0xa4, 0x8c, 0x8a, 0x23, 0x0d, 0x31, 0x2f,
	0x85, 0x36, 0x15, 0x80, 0xf6, 0xdf, 0x35, 0xb8, 0x60, 0x77, 0x06, 0x7d, 0xe3, 0xc0, 0xc5, 0xa9,
	0xe7, 0x08, 0x5d, 0xab, 0x2a, 0x78, 0xee, 0x73, 0xd7, 0xf4, 0xff, 0x2f, 0x5c, 0xb7, 0xdd, 0x7b,
	0xf5, 0xb3, 0x5f, 0xfe, 0xfc, 0xba, 0xe6, 0xa3, 0x57, 0x82, 0xf9, 0xbf, 0x16, 0xba, 0x58, 0xf9,
	0x04, 0x0f, 0xcd, 0x40, 0x3f, 0x41, 0x3f, 0x3a, 0xb0, 0x3e, 0xb3, 0x10, 0xa8, 0xb5, 0x28, 0xf7,
	0xcc, 0xde, 0x35, 0xdb, 0x4f, 0xe2, 0x62, 0x28, 0xdf, 0x54, 0x94, 0xaf, 0xa3, 0xd6, 0x7f, 0x51,
	0xd6, 0x1b, 0xd6, 0x4d, 0xa9, 0x90, 0x13, 0xde, 0x9d, 0xbd, 0x47, 0xa7, 0xae, 0xf3, 0xf8, 0xd4,
	0x75, 0xfe, 0x38, 0x75, 0x9d, 0xaf, 0xce, 0xdc, 0xa5, 0xc7, 0x67, 0xee, 0xd2, 0xaf, 0x67, 0xee,
	0xd2, 0xfd, 0x5d, 0x6b, 0x97, 0xde, 0xba, 0xf7, 0xe1, 0xfe, 0xbb, 0x44, 0x9e, 0xf0, 0xbc, 0x1f,
	0x44, 0x47, 0x98, 0xb2, 0xe0, 0x63, 0x93, 0x45, 0xed, 0x54, 0xaf, 0xae, 0x9e, 0x8f, 0xeb, 0xff,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x94, 0x42, 0xa6, 0x61, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryAccountClient is the client API for QueryAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryAccountClient interface {
	// AccountAssets returns an overview of the sum of all balances for a given user. e.g. balance, staking, funding, etc.
	AccountAssets(ctx context.Context, in *QueryAccountAssetsRequest, opts ...grpc.CallOption) (*QueryAccountAssetsResponse, error)
	// AccountFundedList returns all pools the given user has funded into.
	AccountFundedList(ctx context.Context, in *QueryAccountFundedListRequest, opts ...grpc.CallOption) (*QueryAccountFundedListResponse, error)
}

type queryAccountClient struct {
	cc grpc1.ClientConn
}

func NewQueryAccountClient(cc grpc1.ClientConn) QueryAccountClient {
	return &queryAccountClient{cc}
}

func (c *queryAccountClient) AccountAssets(ctx context.Context, in *QueryAccountAssetsRequest, opts ...grpc.CallOption) (*QueryAccountAssetsResponse, error) {
	out := new(QueryAccountAssetsResponse)
	err := c.cc.Invoke(ctx, "/kyve.query.v1beta1.QueryAccount/AccountAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAccountClient) AccountFundedList(ctx context.Context, in *QueryAccountFundedListRequest, opts ...grpc.CallOption) (*QueryAccountFundedListResponse, error) {
	out := new(QueryAccountFundedListResponse)
	err := c.cc.Invoke(ctx, "/kyve.query.v1beta1.QueryAccount/AccountFundedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAccountServer is the server API for QueryAccount service.
type QueryAccountServer interface {
	// AccountAssets returns an overview of the sum of all balances for a given user. e.g. balance, staking, funding, etc.
	AccountAssets(context.Context, *QueryAccountAssetsRequest) (*QueryAccountAssetsResponse, error)
	// AccountFundedList returns all pools the given user has funded into.
	AccountFundedList(context.Context, *QueryAccountFundedListRequest) (*QueryAccountFundedListResponse, error)
}

// UnimplementedQueryAccountServer can be embedded to have forward compatible implementations.
type UnimplementedQueryAccountServer struct {
}

func (*UnimplementedQueryAccountServer) AccountAssets(ctx context.Context, req *QueryAccountAssetsRequest) (*QueryAccountAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAssets not implemented")
}
func (*UnimplementedQueryAccountServer) AccountFundedList(ctx context.Context, req *QueryAccountFundedListRequest) (*QueryAccountFundedListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountFundedList not implemented")
}

func RegisterQueryAccountServer(s grpc1.Server, srv QueryAccountServer) {
	s.RegisterService(&_QueryAccount_serviceDesc, srv)
}

func _QueryAccount_AccountAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAccountServer).AccountAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.query.v1beta1.QueryAccount/AccountAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAccountServer).AccountAssets(ctx, req.(*QueryAccountAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAccount_AccountFundedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountFundedListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAccountServer).AccountFundedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.query.v1beta1.QueryAccount/AccountFundedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAccountServer).AccountFundedList(ctx, req.(*QueryAccountFundedListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var QueryAccount_serviceDesc = _QueryAccount_serviceDesc
var _QueryAccount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.query.v1beta1.QueryAccount",
	HandlerType: (*QueryAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountAssets",
			Handler:    _QueryAccount_AccountAssets_Handler,
		},
		{
			MethodName: "AccountFundedList",
			Handler:    _QueryAccount_AccountFundedList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/query/v1beta1/account.proto",
}

func (m *QueryAccountAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProtocolFunding) > 0 {
		for iNdEx := len(m.ProtocolFunding) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProtocolFunding[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CommissionRewards) > 0 {
		for iNdEx := len(m.CommissionRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommissionRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.DelegationRewards) > 0 {
		for iNdEx := len(m.DelegationRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DelegationUnbonding != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.DelegationUnbonding))
		i--
		dAtA[i] = 0x18
	}
	if m.Delegation != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Delegation))
		i--
		dAtA[i] = 0x10
	}
	if m.Balance != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountDelegationUnbondingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountDelegationUnbondingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountDelegationUnbondingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountDelegationUnbondingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountDelegationUnbondingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountDelegationUnbondingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Unbondings) > 0 {
		for iNdEx := len(m.Unbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Staker != nil {
		{
			size, err := m.Staker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CreationTime != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.CreationTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Amount != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountFundedListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountFundedListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountFundedListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountFundedListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountFundedListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountFundedListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funded) > 0 {
		for iNdEx := len(m.Funded) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funded[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Funded) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funded) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funded) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountRedelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountRedelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountRedelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountRedelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountRedelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountRedelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AvailableSlots != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.AvailableSlots))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RedelegationCooldownEntries) > 0 {
		for iNdEx := len(m.RedelegationCooldownEntries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RedelegationCooldownEntries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RedelegationEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedelegationEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedelegationEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinishDate != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.FinishDate))
		i--
		dAtA[i] = 0x10
	}
	if m.CreationDate != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.CreationDate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAccountAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	return n
}

func (m *QueryAccountAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != 0 {
		n += 1 + sovAccount(uint64(m.Balance))
	}
	if m.Delegation != 0 {
		n += 1 + sovAccount(uint64(m.Delegation))
	}
	if m.DelegationUnbonding != 0 {
		n += 1 + sovAccount(uint64(m.DelegationUnbonding))
	}
	if len(m.DelegationRewards) > 0 {
		for _, e := range m.DelegationRewards {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if len(m.CommissionRewards) > 0 {
		for _, e := range m.CommissionRewards {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if len(m.ProtocolFunding) > 0 {
		for _, e := range m.ProtocolFunding {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	return n
}

func (m *QueryAccountDelegationUnbondingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	return n
}

func (m *QueryAccountDelegationUnbondingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unbondings) > 0 {
		for _, e := range m.Unbondings {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	return n
}

func (m *DelegationUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovAccount(uint64(m.Amount))
	}
	if m.CreationTime != 0 {
		n += 1 + sovAccount(uint64(m.CreationTime))
	}
	if m.Staker != nil {
		l = m.Staker.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	return n
}

func (m *QueryAccountFundedListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	return n
}

func (m *QueryAccountFundedListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Funded) > 0 {
		for _, e := range m.Funded {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	return n
}

func (m *Funded) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	return n
}

func (m *QueryAccountRedelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	return n
}

func (m *QueryAccountRedelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RedelegationCooldownEntries) > 0 {
		for _, e := range m.RedelegationCooldownEntries {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if m.AvailableSlots != 0 {
		n += 1 + sovAccount(uint64(m.AvailableSlots))
	}
	return n
}

func (m *RedelegationEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationDate != 0 {
		n += 1 + sovAccount(uint64(m.CreationDate))
	}
	if m.FinishDate != 0 {
		n += 1 + sovAccount(uint64(m.FinishDate))
	}
	return n
}

func sovAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccount(x uint64) (n int) {
	return sovAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAccountAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			m.Delegation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delegation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationUnbonding", wireType)
			}
			m.DelegationUnbonding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationUnbonding |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationRewards = append(m.DelegationRewards, types.Coin{})
			if err := m.DelegationRewards[len(m.DelegationRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommissionRewards = append(m.CommissionRewards, types.Coin{})
			if err := m.CommissionRewards[len(m.CommissionRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFunding", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolFunding = append(m.ProtocolFunding, types.Coin{})
			if err := m.ProtocolFunding[len(m.ProtocolFunding)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountDelegationUnbondingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountDelegationUnbondingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountDelegationUnbondingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountDelegationUnbondingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountDelegationUnbondingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountDelegationUnbondingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unbondings = append(m.Unbondings, DelegationUnbonding{})
			if err := m.Unbondings[len(m.Unbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staker == nil {
				m.Staker = &FullStaker{}
			}
			if err := m.Staker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountFundedListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountFundedListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountFundedListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountFundedListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountFundedListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountFundedListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funded = append(m.Funded, Funded{})
			if err := m.Funded[len(m.Funded)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Funded) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funded: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funded: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &BasicPool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, types.Coin{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountRedelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountRedelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountRedelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountRedelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountRedelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountRedelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationCooldownEntries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedelegationCooldownEntries = append(m.RedelegationCooldownEntries, RedelegationEntry{})
			if err := m.RedelegationCooldownEntries[len(m.RedelegationCooldownEntries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableSlots", wireType)
			}
			m.AvailableSlots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableSlots |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedelegationEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedelegationEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedelegationEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationDate", wireType)
			}
			m.CreationDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishDate", wireType)
			}
			m.FinishDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishDate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccount = fmt.Errorf("proto: unexpected end of group")
)
