// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kyve/query/v1beta1/stakers.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/KYVENetwork/chain/x/stakers/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StakerStatus ...
type StakerStatus int32

const (
	// STAKER_STATUS_UNSPECIFIED ...
	STAKER_STATUS_UNSPECIFIED StakerStatus = 0
	// STAKER_STATUS_ACTIVE ...
	STAKER_STATUS_ACTIVE StakerStatus = 1
	// STAKER_STATUS_INACTIVE ...
	STAKER_STATUS_INACTIVE StakerStatus = 2
)

var StakerStatus_name = map[int32]string{
	0: "STAKER_STATUS_UNSPECIFIED",
	1: "STAKER_STATUS_ACTIVE",
	2: "STAKER_STATUS_INACTIVE",
}

var StakerStatus_value = map[string]int32{
	"STAKER_STATUS_UNSPECIFIED": 0,
	"STAKER_STATUS_ACTIVE":      1,
	"STAKER_STATUS_INACTIVE":    2,
}

func (x StakerStatus) String() string {
	return proto.EnumName(StakerStatus_name, int32(x))
}

func (StakerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{0}
}

// QueryStakersRequest is the request type for the Query/Stakers RPC method.
type QueryStakersRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// status looks whether a staker is participating in pools or not
	Status StakerStatus `protobuf:"varint,2,opt,name=status,proto3,enum=kyve.query.v1beta1.StakerStatus" json:"status,omitempty"`
	// search searches for moniker OR address
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (m *QueryStakersRequest) Reset()         { *m = QueryStakersRequest{} }
func (m *QueryStakersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakersRequest) ProtoMessage()    {}
func (*QueryStakersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{0}
}
func (m *QueryStakersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakersRequest.Merge(m, src)
}
func (m *QueryStakersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakersRequest proto.InternalMessageInfo

func (m *QueryStakersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryStakersRequest) GetStatus() StakerStatus {
	if m != nil {
		return m.Status
	}
	return STAKER_STATUS_UNSPECIFIED
}

func (m *QueryStakersRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

// QueryStakersResponse is the response type for the Query/Stakers RPC method.
type QueryStakersResponse struct {
	// stakers ...
	Stakers []FullStaker `protobuf:"bytes,1,rep,name=stakers,proto3" json:"stakers"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStakersResponse) Reset()         { *m = QueryStakersResponse{} }
func (m *QueryStakersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakersResponse) ProtoMessage()    {}
func (*QueryStakersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{1}
}
func (m *QueryStakersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakersResponse.Merge(m, src)
}
func (m *QueryStakersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakersResponse proto.InternalMessageInfo

func (m *QueryStakersResponse) GetStakers() []FullStaker {
	if m != nil {
		return m.Stakers
	}
	return nil
}

func (m *QueryStakersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStakerRequest is the request type for the Query/Staker RPC method.
type QueryStakerRequest struct {
	// address ...
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryStakerRequest) Reset()         { *m = QueryStakerRequest{} }
func (m *QueryStakerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakerRequest) ProtoMessage()    {}
func (*QueryStakerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{2}
}
func (m *QueryStakerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerRequest.Merge(m, src)
}
func (m *QueryStakerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerRequest proto.InternalMessageInfo

func (m *QueryStakerRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryStakerResponse is the response type for the Query/Staker RPC method.
type QueryStakerResponse struct {
	// staker ...
	Staker FullStaker `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker"`
}

func (m *QueryStakerResponse) Reset()         { *m = QueryStakerResponse{} }
func (m *QueryStakerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakerResponse) ProtoMessage()    {}
func (*QueryStakerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{3}
}
func (m *QueryStakerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerResponse.Merge(m, src)
}
func (m *QueryStakerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerResponse proto.InternalMessageInfo

func (m *QueryStakerResponse) GetStaker() FullStaker {
	if m != nil {
		return m.Staker
	}
	return FullStaker{}
}

// QueryStakersByPoolRequest is the request type for the Query/Staker RPC method.
type QueryStakersByPoolRequest struct {
	// pool_id ...
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryStakersByPoolRequest) Reset()         { *m = QueryStakersByPoolRequest{} }
func (m *QueryStakersByPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakersByPoolRequest) ProtoMessage()    {}
func (*QueryStakersByPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{4}
}
func (m *QueryStakersByPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakersByPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakersByPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakersByPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakersByPoolRequest.Merge(m, src)
}
func (m *QueryStakersByPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakersByPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakersByPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakersByPoolRequest proto.InternalMessageInfo

func (m *QueryStakersByPoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// QueryStakersByPoolResponse is the response type for the Query/Staker RPC method.
type QueryStakersByPoolResponse struct {
	// stakers ...
	Stakers []StakerPoolResponse `protobuf:"bytes,1,rep,name=stakers,proto3" json:"stakers"`
}

func (m *QueryStakersByPoolResponse) Reset()         { *m = QueryStakersByPoolResponse{} }
func (m *QueryStakersByPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakersByPoolResponse) ProtoMessage()    {}
func (*QueryStakersByPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{5}
}
func (m *QueryStakersByPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakersByPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakersByPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakersByPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakersByPoolResponse.Merge(m, src)
}
func (m *QueryStakersByPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakersByPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakersByPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakersByPoolResponse proto.InternalMessageInfo

func (m *QueryStakersByPoolResponse) GetStakers() []StakerPoolResponse {
	if m != nil {
		return m.Stakers
	}
	return nil
}

// StakerPoolResponse ...
type StakerPoolResponse struct {
	// staker ...
	Staker *FullStaker `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
	// valaccount ...
	Valaccount *types.Valaccount `protobuf:"bytes,2,opt,name=valaccount,proto3" json:"valaccount,omitempty"`
}

func (m *StakerPoolResponse) Reset()         { *m = StakerPoolResponse{} }
func (m *StakerPoolResponse) String() string { return proto.CompactTextString(m) }
func (*StakerPoolResponse) ProtoMessage()    {}
func (*StakerPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{6}
}
func (m *StakerPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerPoolResponse.Merge(m, src)
}
func (m *StakerPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *StakerPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StakerPoolResponse proto.InternalMessageInfo

func (m *StakerPoolResponse) GetStaker() *FullStaker {
	if m != nil {
		return m.Staker
	}
	return nil
}

func (m *StakerPoolResponse) GetValaccount() *types.Valaccount {
	if m != nil {
		return m.Valaccount
	}
	return nil
}

// QueryStakersByPoolCountRequest ...
type QueryStakersByPoolCountRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStakersByPoolCountRequest) Reset()         { *m = QueryStakersByPoolCountRequest{} }
func (m *QueryStakersByPoolCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakersByPoolCountRequest) ProtoMessage()    {}
func (*QueryStakersByPoolCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{7}
}
func (m *QueryStakersByPoolCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakersByPoolCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakersByPoolCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakersByPoolCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakersByPoolCountRequest.Merge(m, src)
}
func (m *QueryStakersByPoolCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakersByPoolCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakersByPoolCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakersByPoolCountRequest proto.InternalMessageInfo

func (m *QueryStakersByPoolCountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStakersByPoolCountResponse ...
type QueryStakersByPoolCountResponse struct {
	// stakers ...
	Stakers []FullStaker `protobuf:"bytes,1,rep,name=stakers,proto3" json:"stakers"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStakersByPoolCountResponse) Reset()         { *m = QueryStakersByPoolCountResponse{} }
func (m *QueryStakersByPoolCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakersByPoolCountResponse) ProtoMessage()    {}
func (*QueryStakersByPoolCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6aa31a681566da33, []int{8}
}
func (m *QueryStakersByPoolCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakersByPoolCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakersByPoolCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakersByPoolCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakersByPoolCountResponse.Merge(m, src)
}
func (m *QueryStakersByPoolCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakersByPoolCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakersByPoolCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakersByPoolCountResponse proto.InternalMessageInfo

func (m *QueryStakersByPoolCountResponse) GetStakers() []FullStaker {
	if m != nil {
		return m.Stakers
	}
	return nil
}

func (m *QueryStakersByPoolCountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterEnum("kyve.query.v1beta1.StakerStatus", StakerStatus_name, StakerStatus_value)
	proto.RegisterType((*QueryStakersRequest)(nil), "kyve.query.v1beta1.QueryStakersRequest")
	proto.RegisterType((*QueryStakersResponse)(nil), "kyve.query.v1beta1.QueryStakersResponse")
	proto.RegisterType((*QueryStakerRequest)(nil), "kyve.query.v1beta1.QueryStakerRequest")
	proto.RegisterType((*QueryStakerResponse)(nil), "kyve.query.v1beta1.QueryStakerResponse")
	proto.RegisterType((*QueryStakersByPoolRequest)(nil), "kyve.query.v1beta1.QueryStakersByPoolRequest")
	proto.RegisterType((*QueryStakersByPoolResponse)(nil), "kyve.query.v1beta1.QueryStakersByPoolResponse")
	proto.RegisterType((*StakerPoolResponse)(nil), "kyve.query.v1beta1.StakerPoolResponse")
	proto.RegisterType((*QueryStakersByPoolCountRequest)(nil), "kyve.query.v1beta1.QueryStakersByPoolCountRequest")
	proto.RegisterType((*QueryStakersByPoolCountResponse)(nil), "kyve.query.v1beta1.QueryStakersByPoolCountResponse")
}

func init() { proto.RegisterFile("kyve/query/v1beta1/stakers.proto", fileDescriptor_6aa31a681566da33) }

var fileDescriptor_6aa31a681566da33 = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x4f, 0x4f, 0x13, 0x4d,
	0x1c, 0xee, 0x94, 0xa6, 0x0d, 0x03, 0xef, 0x1b, 0x32, 0x2f, 0xe1, 0x2d, 0xab, 0x2c, 0xcd, 0x6a,
	0x4a, 0x45, 0xd9, 0x09, 0x45, 0x8d, 0x07, 0x63, 0xe4, 0x4f, 0x6b, 0x1a, 0x12, 0x82, 0xdb, 0x42,
	0xa2, 0x97, 0x66, 0xda, 0x4e, 0xb6, 0x9b, 0x96, 0x9d, 0xb2, 0xb3, 0x45, 0x1b, 0xc2, 0x41, 0x2f,
	0x7a, 0x32, 0x26, 0x7e, 0x00, 0x0f, 0xc6, 0x8b, 0x17, 0xfd, 0x18, 0x1c, 0x49, 0xbc, 0x78, 0x32,
	0x06, 0xfc, 0x0e, 0x5e, 0x4d, 0x67, 0x67, 0x71, 0x17, 0x5a, 0x5b, 0x12, 0x0f, 0xde, 0x66, 0x76,
	0x9e, 0x67, 0x7e, 0xcf, 0xf3, 0xcc, 0xfc, 0x66, 0x61, 0xaa, 0xd1, 0xd9, 0xa3, 0x78, 0xb7, 0x4d,
	0x9d, 0x0e, 0xde, 0x5b, 0xac, 0x50, 0x97, 0x2c, 0x62, 0xee, 0x92, 0x06, 0x75, 0xb8, 0xde, 0x72,
	0x98, 0xcb, 0x10, 0xea, 0x22, 0x74, 0x81, 0xd0, 0x25, 0x42, 0x99, 0xaf, 0x32, 0xbe, 0xc3, 0x38,
	0xae, 0x10, 0x7e, 0x96, 0xdc, 0x22, 0xa6, 0x65, 0x13, 0xd7, 0x62, 0xb6, 0xc7, 0x57, 0x26, 0x4d,
	0x66, 0x32, 0x31, 0xc4, 0xdd, 0x91, 0xfc, 0x7a, 0xd9, 0x64, 0xcc, 0x6c, 0x52, 0x4c, 0x5a, 0x16,
	0x26, 0xb6, 0xcd, 0x5c, 0x41, 0x91, 0x35, 0x15, 0xb5, 0x87, 0x2a, 0x4f, 0x81, 0xb7, 0xae, 0x89,
	0x75, 0xa9, 0xb3, 0xb7, 0x6e, 0xed, 0x23, 0x80, 0xff, 0x3d, 0xec, 0x72, 0x8a, 0xde, 0x67, 0x83,
	0xee, 0xb6, 0x29, 0x77, 0x51, 0x1e, 0xc2, 0x5f, 0x1a, 0x93, 0x20, 0x05, 0x32, 0x63, 0xd9, 0xb4,
	0xee, 0x19, 0xd2, 0xbb, 0x86, 0xc2, 0x5e, 0xf5, 0x4d, 0x62, 0x52, 0xc9, 0x35, 0x02, 0x4c, 0x74,
	0x07, 0xc6, 0xb9, 0x4b, 0xdc, 0x36, 0x4f, 0x46, 0x53, 0x20, 0xf3, 0x6f, 0x36, 0xa5, 0x9f, 0x0f,
	0x4a, 0xf7, 0x6a, 0x17, 0x05, 0xce, 0x90, 0x78, 0x34, 0x05, 0xe3, 0x9c, 0x12, 0xa7, 0x5a, 0x4f,
	0x8e, 0xa4, 0x40, 0x66, 0xd4, 0x90, 0x33, 0xed, 0x2d, 0x80, 0x93, 0x61, 0xc5, 0xbc, 0xc5, 0x6c,
	0x4e, 0xd1, 0x3d, 0x98, 0x90, 0xde, 0x92, 0x20, 0x35, 0x92, 0x19, 0xcb, 0xaa, 0xbd, 0x6a, 0xe5,
	0xdb, 0xcd, 0xa6, 0xc7, 0x5c, 0x89, 0x1d, 0x7e, 0x9d, 0x8d, 0x18, 0x3e, 0x09, 0x3d, 0x08, 0x59,
	0x8e, 0x0a, 0xcb, 0x73, 0x03, 0x2d, 0x7b, 0xc5, 0x83, 0x9e, 0x35, 0x1d, 0xa2, 0x80, 0x40, 0x3f,
	0xd1, 0x24, 0x4c, 0x90, 0x5a, 0xcd, 0xa1, 0x9c, 0x8b, 0x38, 0x47, 0x0d, 0x7f, 0xaa, 0x15, 0x43,
	0x47, 0x70, 0xea, 0xe7, 0xae, 0x88, 0xae, 0x41, 0x1d, 0x19, 0xff, 0x70, 0x76, 0x24, 0x47, 0xbb,
	0x09, 0xa7, 0x83, 0x29, 0xad, 0x74, 0x36, 0x19, 0x6b, 0xfa, 0x5a, 0xfe, 0x87, 0x89, 0x16, 0x63,
	0xcd, 0xb2, 0x55, 0x13, 0x7b, 0xc7, 0x8c, 0x78, 0x77, 0x5a, 0xa8, 0x69, 0x35, 0xa8, 0xf4, 0x62,
	0x49, 0x45, 0xf9, 0xb3, 0x09, 0xa7, 0xfb, 0x9f, 0x66, 0x90, 0x78, 0x26, 0x69, 0xed, 0x15, 0x80,
	0xe8, 0x3c, 0x0a, 0xdd, 0xbe, 0x98, 0x61, 0xdf, 0x2a, 0xba, 0x0f, 0xe1, 0x1e, 0x69, 0x92, 0x6a,
	0x95, 0xb5, 0x6d, 0x57, 0x1e, 0x9c, 0xbc, 0x67, 0xfe, 0x65, 0xf7, 0xd9, 0xdb, 0xa7, 0x38, 0x23,
	0xc0, 0xd1, 0xea, 0x50, 0x3d, 0x6f, 0x7b, 0x55, 0xc0, 0xfe, 0x6c, 0x3f, 0x68, 0x1f, 0x00, 0x9c,
	0xed, 0x5b, 0xea, 0x2f, 0xbb, 0xc8, 0xf3, 0x16, 0x1c, 0x0f, 0xb6, 0x26, 0x9a, 0x81, 0xd3, 0xc5,
	0xd2, 0xf2, 0x7a, 0xce, 0x28, 0x17, 0x4b, 0xcb, 0xa5, 0xad, 0x62, 0x79, 0x6b, 0xa3, 0xb8, 0x99,
	0x5b, 0x2d, 0xe4, 0x0b, 0xb9, 0xb5, 0x89, 0x08, 0x4a, 0xc2, 0xc9, 0xf0, 0xf2, 0xf2, 0x6a, 0xa9,
	0xb0, 0x9d, 0x9b, 0x00, 0x48, 0x81, 0x53, 0xe1, 0x95, 0xc2, 0x86, 0x5c, 0x8b, 0x2a, 0xb1, 0x97,
	0xef, 0xd4, 0x48, 0xf6, 0x47, 0x0c, 0x8e, 0x07, 0x73, 0x41, 0xcf, 0x00, 0x4c, 0xf8, 0xe3, 0xb9,
	0x5e, 0xfe, 0x7b, 0xbc, 0x5a, 0x4a, 0x66, 0x30, 0xd0, 0xb3, 0xa9, 0x5d, 0x79, 0xfe, 0xf9, 0xfb,
	0x9b, 0xe8, 0x0c, 0xba, 0x84, 0xfb, 0x3f, 0xed, 0xe8, 0x05, 0x80, 0x71, 0x8f, 0x88, 0xd2, 0x03,
	0x76, 0xf6, 0x15, 0xcc, 0x0d, 0xc4, 0x49, 0x01, 0x37, 0x84, 0x80, 0x34, 0xba, 0xda, 0x5f, 0x00,
	0xde, 0x97, 0x2f, 0xc4, 0x01, 0x7a, 0x0f, 0xe0, 0x3f, 0xa1, 0x1b, 0x83, 0x16, 0x06, 0x59, 0x0d,
	0x75, 0xbc, 0xa2, 0x0f, 0x0b, 0x97, 0xf2, 0x6e, 0x09, 0x79, 0x18, 0x2d, 0xfc, 0x26, 0x9f, 0x72,
	0xa5, 0x53, 0xee, 0xbe, 0x1b, 0x78, 0x5f, 0x3e, 0x26, 0x07, 0xe8, 0xd3, 0x69, 0x67, 0x07, 0x6f,
	0x36, 0xca, 0x0e, 0x57, 0x3d, 0xd8, 0x71, 0xca, 0xd2, 0x85, 0x38, 0x52, 0xf6, 0xa2, 0x90, 0x7d,
	0x1d, 0x5d, 0x1b, 0x42, 0x76, 0x59, 0xf4, 0xfe, 0xca, 0xda, 0xe1, 0xb1, 0x0a, 0x8e, 0x8e, 0x55,
	0xf0, 0xed, 0x58, 0x05, 0xaf, 0x4f, 0xd4, 0xc8, 0xd1, 0x89, 0x1a, 0xf9, 0x72, 0xa2, 0x46, 0x1e,
	0xcf, 0x9b, 0x96, 0x5b, 0x6f, 0x57, 0xf4, 0x2a, 0xdb, 0xc1, 0xeb, 0x8f, 0xb6, 0x73, 0x1b, 0xd4,
	0x7d, 0xc2, 0x9c, 0x06, 0xae, 0xd6, 0x89, 0x65, 0xe3, 0xa7, 0x72, 0x77, 0xb7, 0xd3, 0xa2, 0xbc,
	0x12, 0x17, 0xbf, 0xd3, 0xa5, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0x64, 0xf5, 0xe3, 0x2a,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryStakersClient is the client API for QueryStakers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryStakersClient interface {
	// Stakers queries for all stakers.
	Stakers(ctx context.Context, in *QueryStakersRequest, opts ...grpc.CallOption) (*QueryStakersResponse, error)
	// Staker queries for all stakers.
	Staker(ctx context.Context, in *QueryStakerRequest, opts ...grpc.CallOption) (*QueryStakerResponse, error)
	// StakersByPool queries for all stakers that are currently participating in the given pool
	StakersByPool(ctx context.Context, in *QueryStakersByPoolRequest, opts ...grpc.CallOption) (*QueryStakersByPoolResponse, error)
	// StakersByPool queries for all stakers and sorted them first by number of pools participating and
	// then by delegation
	StakersByPoolCount(ctx context.Context, in *QueryStakersByPoolCountRequest, opts ...grpc.CallOption) (*QueryStakersByPoolCountResponse, error)
}

type queryStakersClient struct {
	cc grpc1.ClientConn
}

func NewQueryStakersClient(cc grpc1.ClientConn) QueryStakersClient {
	return &queryStakersClient{cc}
}

func (c *queryStakersClient) Stakers(ctx context.Context, in *QueryStakersRequest, opts ...grpc.CallOption) (*QueryStakersResponse, error) {
	out := new(QueryStakersResponse)
	err := c.cc.Invoke(ctx, "/kyve.query.v1beta1.QueryStakers/Stakers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakersClient) Staker(ctx context.Context, in *QueryStakerRequest, opts ...grpc.CallOption) (*QueryStakerResponse, error) {
	out := new(QueryStakerResponse)
	err := c.cc.Invoke(ctx, "/kyve.query.v1beta1.QueryStakers/Staker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakersClient) StakersByPool(ctx context.Context, in *QueryStakersByPoolRequest, opts ...grpc.CallOption) (*QueryStakersByPoolResponse, error) {
	out := new(QueryStakersByPoolResponse)
	err := c.cc.Invoke(ctx, "/kyve.query.v1beta1.QueryStakers/StakersByPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryStakersClient) StakersByPoolCount(ctx context.Context, in *QueryStakersByPoolCountRequest, opts ...grpc.CallOption) (*QueryStakersByPoolCountResponse, error) {
	out := new(QueryStakersByPoolCountResponse)
	err := c.cc.Invoke(ctx, "/kyve.query.v1beta1.QueryStakers/StakersByPoolCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryStakersServer is the server API for QueryStakers service.
type QueryStakersServer interface {
	// Stakers queries for all stakers.
	Stakers(context.Context, *QueryStakersRequest) (*QueryStakersResponse, error)
	// Staker queries for all stakers.
	Staker(context.Context, *QueryStakerRequest) (*QueryStakerResponse, error)
	// StakersByPool queries for all stakers that are currently participating in the given pool
	StakersByPool(context.Context, *QueryStakersByPoolRequest) (*QueryStakersByPoolResponse, error)
	// StakersByPool queries for all stakers and sorted them first by number of pools participating and
	// then by delegation
	StakersByPoolCount(context.Context, *QueryStakersByPoolCountRequest) (*QueryStakersByPoolCountResponse, error)
}

// UnimplementedQueryStakersServer can be embedded to have forward compatible implementations.
type UnimplementedQueryStakersServer struct {
}

func (*UnimplementedQueryStakersServer) Stakers(ctx context.Context, req *QueryStakersRequest) (*QueryStakersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stakers not implemented")
}
func (*UnimplementedQueryStakersServer) Staker(ctx context.Context, req *QueryStakerRequest) (*QueryStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Staker not implemented")
}
func (*UnimplementedQueryStakersServer) StakersByPool(ctx context.Context, req *QueryStakersByPoolRequest) (*QueryStakersByPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakersByPool not implemented")
}
func (*UnimplementedQueryStakersServer) StakersByPoolCount(ctx context.Context, req *QueryStakersByPoolCountRequest) (*QueryStakersByPoolCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakersByPoolCount not implemented")
}

func RegisterQueryStakersServer(s grpc1.Server, srv QueryStakersServer) {
	s.RegisterService(&_QueryStakers_serviceDesc, srv)
}

func _QueryStakers_Stakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakersServer).Stakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.query.v1beta1.QueryStakers/Stakers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakersServer).Stakers(ctx, req.(*QueryStakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStakers_Staker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakersServer).Staker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.query.v1beta1.QueryStakers/Staker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakersServer).Staker(ctx, req.(*QueryStakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStakers_StakersByPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakersByPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakersServer).StakersByPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.query.v1beta1.QueryStakers/StakersByPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakersServer).StakersByPool(ctx, req.(*QueryStakersByPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryStakers_StakersByPoolCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakersByPoolCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryStakersServer).StakersByPoolCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kyve.query.v1beta1.QueryStakers/StakersByPoolCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryStakersServer).StakersByPoolCount(ctx, req.(*QueryStakersByPoolCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var QueryStakers_serviceDesc = _QueryStakers_serviceDesc
var _QueryStakers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kyve.query.v1beta1.QueryStakers",
	HandlerType: (*QueryStakersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stakers",
			Handler:    _QueryStakers_Stakers_Handler,
		},
		{
			MethodName: "Staker",
			Handler:    _QueryStakers_Staker_Handler,
		},
		{
			MethodName: "StakersByPool",
			Handler:    _QueryStakers_StakersByPool_Handler,
		},
		{
			MethodName: "StakersByPoolCount",
			Handler:    _QueryStakers_StakersByPoolCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kyve/query/v1beta1/stakers.proto",
}

func (m *QueryStakersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Search) > 0 {
		i -= len(m.Search)
		copy(dAtA[i:], m.Search)
		i = encodeVarintStakers(dAtA, i, uint64(len(m.Search)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStakers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStakers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStakers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStakers(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Staker.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStakers(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStakersByPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakersByPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakersByPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintStakers(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakersByPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakersByPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakersByPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStakers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StakerPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valaccount != nil {
		{
			size, err := m.Valaccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStakers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Staker != nil {
		{
			size, err := m.Staker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStakers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakersByPoolCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakersByPoolCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakersByPoolCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStakers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakersByPoolCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakersByPoolCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakersByPoolCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStakers(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStakers(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakers(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakers(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStakersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStakers(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStakers(uint64(m.Status))
	}
	l = len(m.Search)
	if l > 0 {
		n += 1 + l + sovStakers(uint64(l))
	}
	return n
}

func (m *QueryStakersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for _, e := range m.Stakers {
			l = e.Size()
			n += 1 + l + sovStakers(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStakers(uint64(l))
	}
	return n
}

func (m *QueryStakerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStakers(uint64(l))
	}
	return n
}

func (m *QueryStakerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Staker.Size()
	n += 1 + l + sovStakers(uint64(l))
	return n
}

func (m *QueryStakersByPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovStakers(uint64(m.PoolId))
	}
	return n
}

func (m *QueryStakersByPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for _, e := range m.Stakers {
			l = e.Size()
			n += 1 + l + sovStakers(uint64(l))
		}
	}
	return n
}

func (m *StakerPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staker != nil {
		l = m.Staker.Size()
		n += 1 + l + sovStakers(uint64(l))
	}
	if m.Valaccount != nil {
		l = m.Valaccount.Size()
		n += 1 + l + sovStakers(uint64(l))
	}
	return n
}

func (m *QueryStakersByPoolCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStakers(uint64(l))
	}
	return n
}

func (m *QueryStakersByPoolCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for _, e := range m.Stakers {
			l = e.Size()
			n += 1 + l + sovStakers(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovStakers(uint64(l))
	}
	return n
}

func sovStakers(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakers(x uint64) (n int) {
	return sovStakers(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStakersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= StakerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Search", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Search = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, FullStaker{})
			if err := m.Stakers[len(m.Stakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Staker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakersByPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakersByPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakersByPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakersByPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakersByPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakersByPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, StakerPoolResponse{})
			if err := m.Stakers[len(m.Stakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Staker == nil {
				m.Staker = &FullStaker{}
			}
			if err := m.Staker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valaccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Valaccount == nil {
				m.Valaccount = &types.Valaccount{}
			}
			if err := m.Valaccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakersByPoolCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakersByPoolCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakersByPoolCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakersByPoolCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakersByPoolCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakersByPoolCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, FullStaker{})
			if err := m.Stakers[len(m.Stakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakers
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakers
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakers(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakers
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakers(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakers
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakers
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakers
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakers
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakers
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakers        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakers          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakers = fmt.Errorf("proto: unexpected end of group")
)
