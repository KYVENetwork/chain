syntax = "proto3";

package kyve.query.v1beta1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "gogoproto/gogo.proto";
import "kyve/pool/v1beta1/pool.proto";

option go_package = "github.com/KYVENetwork/chain/x/query/types";

/*
   This query-module servers all queries for the following (KYVE-)modules:
   bundles, pool, delegation, stakers

   As a lot of request require composition of multiple module-data
   everything will be served from one single query module.

   The named packages do not implement their own queries (expect for params)

   For simplicity all queries and their objects are in the corresponding
   proto files

   Messages that are used for across multiple queries are defined here.
*/

// BasicPool contains the necessary properties need for a pool
// to be displayed in the UI
message BasicPool {
  // id is the ID of the pool
  uint64 id = 1;

  // name of the pool
  string name = 2;

  // runtime for the protocol nodes
  // like evm, bitcoin, etc.
  string runtime = 3;

  // logo of the pool
  string logo = 4;

  // inflation_share_weight is the base payout for each bundle reward
  string inflation_share_weight = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // upload_interval is the interval bundles get created
  uint64 upload_interval = 6;

  // total_funds of the pool. If the pool runs
  // out of funds no more bundles will be produced
  repeated cosmos.base.v1beta1.Coin total_funds = 7 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // total_stake of the pool
  uint64 total_stake = 8;

  // status of the pool if pool is able
  // to produce bundles, etc.
  kyve.pool.v1beta1.PoolStatus status = 9;
}

// FullStaker aggregates information from the staker and its delegators
// as well as pending queue entries into one object.
// It contains almost all needed information for a convenient usage
message FullStaker {
  // address of the staker
  string address = 1;

  cosmos.staking.v1beta1.Validator validator = 2;

  // total_pool_stake returns the amount the validator has in total
  // staked in all his pools
  uint64 total_pool_stake = 3;

  // pools is a list of all pools the staker is currently
  // participating, i.e. allowed to vote and upload data.
  repeated PoolMembership pools = 4;
}

// CommissionChangeEntry shows when the old commission
// of a staker will change to the new commission
message CommissionChangeEntry {
  // commission is the new commission that will
  // become active once the change-time is over
  string commission = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // creation_date is the UNIX-timestamp (in seconds)
  // of when the entry was created.
  int64 creation_date = 2;
}

// StakeFractionChangeEntry shows when the old stake fraction
// of a staker will change to the new stake fraction
message StakeFractionChangeEntry {
  // stake_fraction is the new stake_fraction that will
  // become active once the change-time is over
  string stake_fraction = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // creation_date is the UNIX-timestamp (in seconds)
  // of when the entry was created.
  int64 creation_date = 2;
}

// PoolMembership shows in which pool the staker
// is participating
message PoolMembership {
  // pool contains useful information about the pool
  BasicPool pool = 1;

  // points indicates if the staker is inactive
  // If the staker misses a vote, a point is added.
  // After 5 points the staker is removed from
  // the stakers set.
  uint64 points = 2;

  // is_leaving indicates if a user has scheduled a
  // a PoolLeave entry. After the leave-time is over
  // the staker will no longer participate in that pool
  bool is_leaving = 3;

  // Valaddress is the address which is authorized to vote
  // and submit bundles. If the server gets compromised
  // the staker can just change the valaddress.
  string valaddress = 4;

  // balance is the valaddress account balance and indicates
  // whether or not the valaccount needs additional funds to
  // pay for gas fees
  uint64 balance = 5;

  // commission is the commission the validator has chosen for
  // this specific pool
  string commission = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // pending_commission_change shows if the staker plans
  // to change its commission. Delegators will see a warning in
  // the UI. A Commission change takes some time until
  // the commission is applied. Users have time to redelegate
  // if they not agree with the new commission.
  CommissionChangeEntry pending_commission_change = 7;

  // stake fraction is a percentage the validator has chosen for
  // this pool. It is the fraction of how much of his total stake
  // the validator wants to stake in this specific pool
  string stake_fraction = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // pending_stake_fraction_change shows if the staker plans
  // to change its stake fraction. Delegators will see a warning in
  // the UI. A stake fraction change takes some time until
  // the stake fraction is applied. Users have time to redelegate
  // if they not agree with the new stake fraction.
  StakeFractionChangeEntry pending_stake_fraction_change = 9;

  // pool stake shows the actual amount the validator has staked
  // in this pool. It can be lower than the specified stake fraction
  // because of the max voting power limit
  uint64 pool_stake = 10;
}
