syntax = "proto3";

package kyve.query.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/KYVENetwork/chain/x/query/types";

// QueryDelegation contains all rpc requests related to direct delegation data
service QueryBundles {
  // FinalizedBundles ...
  rpc FinalizedBundlesQuery(QueryFinalizedBundlesRequest) returns (QueryFinalizedBundlesResponse) {
    option (google.api.http).get = "/kyve/v1/bundles/{pool_id}";
  }

  // FinalizedBundle ...
  rpc FinalizedBundleQuery(QueryFinalizedBundleRequest) returns (QueryFinalizedBundleResponse) {
    option (google.api.http).get = "/kyve/v1/bundles/{pool_id}/{id}";
  }

  // CurrentVoteStatus ...
  rpc CurrentVoteStatus(QueryCurrentVoteStatusRequest) returns (QueryCurrentVoteStatusResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/current_vote_status/{pool_id}";
  }

  // CanValidate ...
  rpc CanValidate(QueryCanValidateRequest) returns (QueryCanValidateResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/can_validate/{pool_id}/{pool_address}";
  }

  // CanPropose ...
  rpc CanPropose(QueryCanProposeRequest) returns (QueryCanProposeResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/can_propose/{pool_id}/{staker}/{proposer}/{from_index}";
  }

  // CanVote checks if voter on pool can still vote for the given bundle
  rpc CanVote(QueryCanVoteRequest) returns (QueryCanVoteResponse) {
    option (google.api.http).get = "/kyve/query/v1beta1/can_vote/{pool_id}/{staker}/{voter}/{storage_id}";
  }
}

// FinalizedBundle represents the latest version of a valid bundle of a pool
message FinalizedBundle {
  // pool_id in which the bundle was created
  uint64 pool_id = 1;
  // id is is integrated with each valid bundle produced.
  uint64 id = 2;
  // storage_id is the id with which the data can be retrieved from the configured data provider
  string storage_id = 3;
  // uploader is the address of the staker who submitted this bundle
  string uploader = 4;
  // from_index is the index from where the bundle starts (inclusive)
  uint64 from_index = 5;
  // to_index is the index to which the bundle goes (exclusive)
  uint64 to_index = 6;
  // from_key is the key of the first data item in the bundle proposal
  string from_key = 11;
  // to_key the key of the last data item in the bundle
  string to_key = 7;
  // bundle_summary is a summary of the bundle.
  string bundle_summary = 8;
  // data_hash is a sha256 hash of the uploaded data.
  string data_hash = 9;
  // finalized_at contains details of the block that finalized this bundle.
  FinalizedAt finalized_at = 10;
  // storage_provider_id the id of the storage provider where the bundle is stored
  uint64 storage_provider_id = 12;
  // compression_id the id of the compression type with which the data was compressed
  uint64 compression_id = 13;
  // stake_security defines the amount of stake which was present in the pool during the finalization of the bundle.
  // This field was added in schema version 2. Bundles finalized before that return `null`.
  StakeSecurity stake_security = 14;
}

// FinalizedAt stores information about finalization block and time.
message FinalizedAt {
  // height is the block height in which the bundle got finalized.
  string height = 1 [(gogoproto.customtype) = "cosmossdk.io/math.Int"];
  // timestamp is the UNIX timestamp of the block in which the bundle got finalized.
  string timestamp = 2;
}

// StakeSecurity represents the relative security of a finalized bundle
message StakeSecurity {
  // valid_vote_power gives the amount of $KYVE stake that voted `valid`.
  string valid_vote_power = 1 [(gogoproto.customtype) = "cosmossdk.io/math.Int"];
  // total_vote_power gives the amount of total $KYVE stake that was present in the pool
  // during finalization.
  string total_vote_power = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Int"];
}

// ===========================
// finalized_bundles/{pool_id}
// ===========================

// QueryFinalizedBundlesRequest is the request type for the Query/Staker RPC method.
message QueryFinalizedBundlesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  // pool_id ...
  uint64 pool_id = 2;
  // index is an optional parameter which tells the server to only show
  // the bundle with the given index. This can not be combined with pagination.
  string index = 3;
}

// QueryStakersByPoolResponse is the response type for the Query/Staker RPC method.
message QueryFinalizedBundlesResponse {
  // finalized_bundles ...
  repeated FinalizedBundle finalized_bundles = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// ===============================
// finalized_bundle/{pool_id}/{id}
// ===============================

// QueryFinalizedBundleRequest is the request type for the Query/Staker RPC method.
message QueryFinalizedBundleRequest {
  // pool_id ...
  uint64 pool_id = 1;
  // id ...
  uint64 id = 2;
}

// QueryFinalizedBundleResponse is the response type for the Query/Staker RPC method.
message QueryFinalizedBundleResponse {
  // pool_id in which the bundle was created
  uint64 pool_id = 1;
  // id is is integrated with each valid bundle produced.
  uint64 id = 2;
  // storage_id is the id with which the data can be retrieved from the configured data provider
  string storage_id = 3;
  // uploader is the address of the staker who submitted this bundle
  string uploader = 4;
  // from_index is the index from where the bundle starts (inclusive)
  uint64 from_index = 5;
  // to_index is the index to which the bundle goes (exclusive)
  uint64 to_index = 6;
  // from_key is the key of the first data item in the bundle proposal
  string from_key = 11;
  // to_key the key of the last data item in the bundle
  string to_key = 7;
  // bundle_summary is a summary of the bundle.
  string bundle_summary = 8;
  // data_hash is a sha256 hash of the uploaded data.
  string data_hash = 9;
  // finalized_at contains details of the block that finalized this bundle.
  FinalizedAt finalized_at = 10;
  // storage_provider_id the id of the storage provider where the bundle is stored
  uint64 storage_provider_id = 12;
  // compression_id the id of the compression type with which the data was compressed
  uint64 compression_id = 13;
  // stake_security defines the amount of stake which was present in the pool during the finalization of the bundle.
  // This field was added in schema version 2. Bundles finalized before that return `null`.
  StakeSecurity stake_security = 14;
}

// ===============================
// current_vote_status/{pool_id}
// ===============================

// QueryCurrentVoteStatusRequest is the request type for the Query/Staker RPC method.
message QueryCurrentVoteStatusRequest {
  // pool_id ...
  uint64 pool_id = 1;
}

// QueryCurrentVoteStatusResponse is the response type for the Query/Staker RPC method.
message QueryCurrentVoteStatusResponse {
  // valid ...
  uint64 valid = 1;
  // invalid ...
  uint64 invalid = 2;
  // abstain ...
  uint64 abstain = 3;
  // total ...
  uint64 total = 4;
}

// ===================================
// can_validate/{pool_id}/{pool_address}
// ===================================

// QueryCanProposeRequest is the request type for the Query/CanPropose RPC method.
message QueryCanValidateRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // pool_address ...
  string pool_address = 2;
}

// QueryCanProposeResponse is the response type for the Query/CanPropose RPC method.
message QueryCanValidateResponse {
  // possible ...
  bool possible = 1;
  // reason ...
  string reason = 2;
}

// ======================================================
// can_propose/{pool_id}/{staker}/{proposer}/{from_index}
// ======================================================

// QueryCanProposeRequest is the request type for the Query/CanPropose RPC method.
message QueryCanProposeRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // staker ...
  string staker = 2;
  // proposer ...
  string proposer = 3;
  // from_index ...
  uint64 from_index = 4;
}

// QueryCanProposeResponse is the response type for the Query/CanPropose RPC method.
message QueryCanProposeResponse {
  // possible ...
  bool possible = 1;
  // reason ...
  string reason = 2;
}

// ================================================
// can_vote/{pool_id}/{staker}/{voter}/{storage_id}
// ================================================

// QueryCanVoteRequest is the request type for the Query/CanVote RPC method.
message QueryCanVoteRequest {
  // pool_id defines the unique ID of the pool.
  uint64 pool_id = 1;
  // staker ...
  string staker = 2;
  // voter ...
  string voter = 3;
  // storage_id ...
  string storage_id = 4;
}

// QueryCanVoteResponse is the response type for the Query/CanVote RPC method.
message QueryCanVoteResponse {
  // possible ...
  bool possible = 1;
  // reason ...
  string reason = 2;
}
